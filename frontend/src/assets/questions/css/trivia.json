[
    {
        "id": "css-definition",
        "title": "What does CSS stand for?",
        "technology": "css",
        "difficulty": "easy",
        "importance": 3,
        "description": "CSS stands for Cascading Style Sheets. It is a stylesheet language used to describe the visual presentation of HTML elements on a webpage, controlling layout, colors, fonts, and overall design.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>CSS stands for <strong>Cascading Style Sheets</strong>. It defines how HTML elements are displayed on screen, paper, or other media. The term 'cascading' refers to the priority order in which multiple styles are applied — meaning styles can override one another based on specificity and source order."
                },
                {
                    "type": "list",
                    "columns": [
                        "Keyword",
                        "Meaning"
                    ],
                    "rows": [
                        [
                            "<strong>Cascading</strong>",
                            "Styles follow a hierarchy where later or more specific rules override earlier ones."
                        ],
                        [
                            "<strong>Style</strong>",
                            "Defines how content appears — including color, font, spacing, and layout."
                        ],
                        [
                            "<strong>Sheets</strong>",
                            "Refers to the documents (files or blocks) containing these styling rules."
                        ]
                    ],
                    "caption": "Understanding each word in 'Cascading Style Sheets'"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Applying CSS to a Page</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n  background-color: #f0f0f0;\n  font-family: Arial, sans-serif;\n}\nh1 {\n  color: darkblue;\n  text-align: center;\n}"
                },
                {
                    "type": "text",
                    "text": "In this example, CSS styles define the background color, text font, and heading color and alignment — changing the presentation without altering HTML content."
                },
                {
                    "type": "text",
                    "text": "<strong>Why CSS Matters</strong><br><ul><li>Separates content (HTML) from design, improving maintainability.</li><li>Enables consistent styling across multiple pages.</li><li>Supports responsive designs for different devices and screen sizes.</li><li>Allows animations, transitions, and visual effects.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Think of CSS as the <em>fashion designer</em> of your webpage — HTML is the structure, and CSS dresses it up beautifully."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li>CSS = Cascading Style Sheets.</li><li>Controls the presentation and layout of web pages.</li><li>Uses rules made of selectors and declarations.</li><li>Provides flexibility, consistency, and separation between content and design.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-link-html",
        "title": "How do you link a CSS file to an HTML document?",
        "technology": "css",
        "difficulty": "easy",
        "importance": 3,
        "description": "You link a CSS file to an HTML document using the <link> tag inside the <head> section. This allows the browser to load and apply external styles from a separate stylesheet file.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>The most common way to apply CSS to a webpage is by linking an external stylesheet using the <link> tag. This tag connects your HTML document to a .css file, allowing the browser to load styles before rendering the page."
                },
                {
                    "type": "text",
                    "text": "<strong>Syntax</strong><br><br>The <link> tag must be placed inside the <head> section and typically includes three attributes: <code>rel</code>, <code>href</code>, and <code>type</code>."
                },
                {
                    "type": "list",
                    "columns": [
                        "Attribute",
                        "Purpose",
                        "Example"
                    ],
                    "rows": [
                        [
                            "<code>rel</code>",
                            "Specifies the relationship — usually 'stylesheet'.",
                            "<code>rel=\"stylesheet\"</code>"
                        ],
                        [
                            "<code>href</code>",
                            "Specifies the path or URL to the CSS file.",
                            "<code>href=\"styles.css\"</code>"
                        ],
                        [
                            "<code>type</code>",
                            "Specifies the file type — optional in HTML5.",
                            "<code>type=\"text/css\"</code>"
                        ]
                    ],
                    "caption": "Attributes used in the <link> tag"
                },
                {
                    "type": "text",
                    "text": "<strong>Example</strong>"
                },
                {
                    "type": "code",
                    "language": "html",
                    "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>My Styled Page</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n  </head>\n  <body>\n    <h1>Welcome!</h1>\n  </body>\n</html>"
                },
                {
                    "type": "text",
                    "text": "Here, <code>styles.css</code> is an external file that defines how elements like <h1> should appear."
                },
                {
                    "type": "text",
                    "text": "<strong>Advantages of External CSS</strong><br><ul><li>Improves maintainability by separating design from structure.</li><li>Reduces file size and increases loading efficiency through caching.</li><li>Allows global changes across multiple HTML files with one edit.</li><li>Supports reusability and scalability in large projects.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Think of the <link> tag as giving your HTML a <em>fashion consultant</em> — it points to a file that tells the page how to dress up."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li>Use <link rel=\"stylesheet\" href=\"file.css\"> inside <head>.</li><li>The browser downloads and applies the stylesheet automatically.</li><li>External CSS promotes modular and clean code.</li><li>Always ensure the correct path to the CSS file.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-inline-internal-external",
        "title": "What is the difference between inline, internal, and external CSS?",
        "technology": "css",
        "difficulty": "intermediate",
        "importance": 4,
        "description": "CSS can be applied in three ways: inline, internal, and external. Each method differs in scope, maintainability, and how styles are loaded and applied.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>CSS can be written directly inside HTML (inline), embedded within a <style> block (internal), or stored in a separate file (external). Understanding their differences is key to managing scalability, performance, and consistency in design."
                },
                {
                    "type": "list",
                    "columns": [
                        "Type",
                        "Defined In",
                        "Scope",
                        "Use Case"
                    ],
                    "rows": [
                        [
                            "<strong>Inline CSS</strong>",
                            "Inside an element’s <code>style</code> attribute",
                            "Affects one element only",
                            "Quick one-off styling or testing"
                        ],
                        [
                            "<strong>Internal CSS</strong>",
                            "Inside a <style> block in the <head>",
                            "Applies to one page only",
                            "Useful for small or unique pages"
                        ],
                        [
                            "<strong>External CSS</strong>",
                            "In a separate .css file linked with <link>",
                            "Applies to multiple pages",
                            "Best for maintainable, large projects"
                        ]
                    ],
                    "caption": "Comparison of CSS application methods"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Inline CSS</strong>"
                },
                {
                    "type": "code",
                    "language": "html",
                    "code": "<p style=\"color: red; font-size: 18px;\">This is inline styling.</p>"
                },
                {
                    "type": "text",
                    "text": "Inline CSS applies directly to one element. It overrides both internal and external styles but is harder to maintain."
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Internal CSS</strong>"
                },
                {
                    "type": "code",
                    "language": "html",
                    "code": "<style>\n  p {\n    color: blue;\n    font-size: 16px;\n  }\n</style>\n<p>This paragraph is styled internally.</p>"
                },
                {
                    "type": "text",
                    "text": "Internal CSS is written within the <head> section and applies only to that single HTML document."
                },
                {
                    "type": "text",
                    "text": "<strong>Example: External CSS</strong>"
                },
                {
                    "type": "code",
                    "language": "html",
                    "code": "<link rel=\"stylesheet\" href=\"styles.css\">\n<p>This paragraph follows the external CSS rules.</p>"
                },
                {
                    "type": "text",
                    "text": "External CSS links to an outside file, ensuring consistent styles across multiple pages."
                },
                {
                    "type": "text",
                    "text": "<strong>Performance and Maintenance</strong><br><ul><li>External CSS loads once and can be cached, improving performance.</li><li>Internal and inline CSS increase HTML file size and reduce maintainability.</li><li>Inline styles override others due to higher specificity.</li><li>External CSS is preferred for scalability and teamwork.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Think of it like this:<br>- <strong>Inline</strong> = Sticky note on one element.<br>- <strong>Internal</strong> = Rules written on one page.<br>- <strong>External</strong> = One master stylebook for the whole site."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li><strong>Inline:</strong> Fast but messy; use sparingly.</li><li><strong>Internal:</strong> Good for small, single-page projects.</li><li><strong>External:</strong> Best for consistency, performance, and maintainability.</li><li>Always prefer external CSS in professional environments.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-background-color",
        "title": "How do you change the background color of a page using CSS?",
        "technology": "css",
        "difficulty": "easy",
        "importance": 3,
        "description": "The background-color property in CSS sets the background color of an element or the entire webpage. It supports multiple color formats including named colors, hexadecimal, RGB, RGBA, and HSL. When applied to the <body> element, it changes the entire page’s background color.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>The <code>background-color</code> property is one of the most fundamental styling tools in CSS. It defines the color that appears behind an element’s content and padding. You can apply it to the <body> element to color the entire page, or to specific containers like <div> or <section> for localized visual effects."
                },
                {
                    "type": "list",
                    "columns": [
                        "Color Format",
                        "Example",
                        "Description"
                    ],
                    "rows": [
                        [
                            "Named Colors",
                            "background-color: lightblue;",
                            "Simple, readable names such as 'red', 'green', or 'lightblue'."
                        ],
                        [
                            "Hexadecimal",
                            "background-color: #ff5733;",
                            "Defines color with hex codes representing red, green, and blue values."
                        ],
                        [
                            "RGB",
                            "background-color: rgb(255, 200, 100);",
                            "Specifies color using numeric red, green, and blue components (0–255)."
                        ],
                        [
                            "RGBA",
                            "background-color: rgba(0, 0, 0, 0.5);",
                            "Adds transparency with an alpha channel (0 = transparent, 1 = opaque)."
                        ],
                        [
                            "HSL",
                            "background-color: hsl(200, 80%, 50%);",
                            "Represents color by hue, saturation, and lightness."
                        ]
                    ],
                    "caption": "Color value formats supported by background-color"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Coloring the Entire Page</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n  background-color: lavender;\n}"
                },
                {
                    "type": "text",
                    "text": "This code sets the background of the entire webpage to a soft lavender color by targeting the <body> element."
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Coloring a Specific Section</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "div.hero {\n  background-color: linear-gradient(to right, #ff9a9e, #fad0c4);\n  padding: 40px;\n  border-radius: 12px;\n}"
                },
                {
                    "type": "text",
                    "text": "Here, a gradient is applied to a <div> with class 'hero'. Although <code>background-color</code> supports solid colors only, CSS allows gradients using the <code>background</code> shorthand."
                },
                {
                    "type": "text",
                    "text": "<strong>Accessibility and Design Tips</strong><br><ul><li>Ensure sufficient contrast between text and background colors.</li><li>Light backgrounds are easier for reading long text sections.</li><li>Consistent use of background color enhances brand identity and user experience.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Think of <code>background-color</code> as your page’s <em>canvas color</em> — it sets the tone and mood for everything layered on top."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li>Use <code>background-color</code> to define background hues for any element.</li><li>Supports multiple color systems like HEX, RGB, and HSL.</li><li>Applying it to <body> colors the entire page.</li><li>Combine with gradients or images using the <code>background</code> shorthand.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-text-color",
        "title": "What property is used to change the text color in CSS?",
        "technology": "css",
        "difficulty": "easy",
        "importance": 3,
        "description": "The color property in CSS controls the color of text content. It affects inline text and can be defined using various color formats such as names, hexadecimal, RGB, RGBA, or HSL. It is one of the most widely used CSS properties for visual styling.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>The <code>color</code> property determines the text color for an element. It applies to all textual content inside that element, including paragraphs, headings, and links. You can define the color in several ways, using keywords or numeric color models for precision."
                },
                {
                    "type": "list",
                    "columns": [
                        "Format",
                        "Example",
                        "Description"
                    ],
                    "rows": [
                        [
                            "Named Colors",
                            "color: red;",
                            "Uses predefined names such as 'black', 'gray', 'coral', or 'gold'."
                        ],
                        [
                            "Hexadecimal",
                            "color: #00ff7f;",
                            "Specifies red, green, and blue in hexadecimal notation."
                        ],
                        [
                            "RGB",
                            "color: rgb(255, 165, 0);",
                            "Defines red, green, and blue values between 0–255."
                        ],
                        [
                            "RGBA",
                            "color: rgba(255, 0, 0, 0.7);",
                            "Adds transparency through an alpha channel."
                        ],
                        [
                            "HSL",
                            "color: hsl(0, 100%, 50%);",
                            "Specifies hue, saturation, and lightness for more intuitive color control."
                        ]
                    ],
                    "caption": "Different color formats supported by the color property"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Setting the Text Color Globally</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n  color: #333333;\n  background-color: #f8f8f8;\n}"
                },
                {
                    "type": "text",
                    "text": "This sets all text on the page to a dark gray tone, improving contrast and readability on a light background."
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Styling Specific Elements</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "h1 {\n  color: royalblue;\n}\np.note {\n  color: rgba(120, 0, 0, 0.8);\n  font-style: italic;\n}"
                },
                {
                    "type": "text",
                    "text": "Here, the heading appears in royal blue, while paragraphs with class 'note' appear as semi-transparent dark red."
                },
                {
                    "type": "text",
                    "text": "<strong>Best Practices</strong><br><ul><li>Maintain proper contrast between text and background colors for accessibility.</li><li>Avoid using pure black (#000) on pure white backgrounds to reduce eye strain.</li><li>Prefer RGBA or HSL for smoother color transitions and modern design systems.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Think of the <code>color</code> property as the <em>ink</em> of your digital page — it decides what shade your text is printed in."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li>The <code>color</code> property defines text color for an element.</li><li>Accepts multiple formats: named colors, HEX, RGB(A), and HSL.</li><li>Influences readability, accessibility, and visual hierarchy.</li><li>Should complement background colors for contrast and clarity.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-center-text",
        "title": "How do you center text horizontally in CSS?",
        "technology": "css",
        "difficulty": "easy",
        "importance": 4,
        "description": "The text-align property in CSS is used to align text content horizontally within its container. Setting text-align: center aligns inline-level content such as text and inline elements to the center of their parent container.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>The <code>text-align</code> property controls the horizontal alignment of inline or inline-block elements inside a block-level container. By setting it to <code>center</code>, text and other inline content are positioned in the middle of the element’s width."
                },
                {
                    "type": "list",
                    "columns": [
                        "Value",
                        "Description",
                        "Common Use"
                    ],
                    "rows": [
                        [
                            "left",
                            "Aligns text to the left edge of the container (default).",
                            "Used for most content."
                        ],
                        [
                            "center",
                            "Centers text horizontally.",
                            "Used for titles, banners, and centered content blocks."
                        ],
                        [
                            "right",
                            "Aligns text to the right edge.",
                            "Used for special design layouts or right-to-left languages."
                        ],
                        [
                            "justify",
                            "Distributes text evenly between margins.",
                            "Used in documents or paragraphs for clean edges."
                        ]
                    ],
                    "caption": "Common values for text-align"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Centering Text in a Div</strong>"
                },
                {
                    "type": "code",
                    "language": "html",
                    "code": "<div style=\"text-align: center;\">\n  <h1>Welcome to My Website</h1>\n  <p>This paragraph is centered horizontally within its container.</p>\n</div>"
                },
                {
                    "type": "text",
                    "text": "All inline content within the <div> — such as text and inline images — will be horizontally centered."
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Using an External CSS Rule</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "div.container {\n  text-align: center;\n  border: 2px dashed #999;\n  padding: 20px;\n}"
                },
                {
                    "type": "text",
                    "text": "By applying this rule, any text or inline content inside elements with the 'container' class will appear centered, maintaining clean layout separation from HTML structure."
                },
                {
                    "type": "text",
                    "text": "<strong>Important Notes</strong><br><ul><li><code>text-align</code> affects inline content, not the container itself.</li><li>To center a block-level element (like a <div>), use <code>margin: 0 auto;</code> instead.</li><li>Combining <code>text-align: center;</code> with <code>display: flex;</code> offers even more control in modern layouts.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Imagine a box filled with text — <code>text-align: center;</code> tells everything inside to stand neatly in the middle of that box."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li>Use <code>text-align: center;</code> to center text horizontally within a block container.</li><li>Applies to inline-level content like text and inline images.</li><li>Does not center block-level elements themselves.</li><li>Combine with flexbox or grid for advanced alignment control.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-font-family",
        "title": "What is the purpose of the font-family property?",
        "technology": "css",
        "difficulty": "easy",
        "importance": 4,
        "description": "The font-family property in CSS specifies the typeface or group of typefaces to be used for displaying text. It allows developers to control the appearance and readability of textual content across different devices and platforms.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>The <code>font-family</code> property determines which typeface is used for rendering text on a webpage. It can list multiple font names in a prioritized order, known as a font stack, to ensure consistent display even if some fonts are unavailable on a user’s device."
                },
                {
                    "type": "list",
                    "columns": [
                        "Term",
                        "Description",
                        "Example"
                    ],
                    "rows": [
                        [
                            "Primary Font",
                            "The preferred typeface to use.",
                            "font-family: 'Roboto', sans-serif;"
                        ],
                        [
                            "Fallback Fonts",
                            "Alternatives that load if the primary font isn’t available.",
                            "'Helvetica', 'Arial'"
                        ],
                        [
                            "Generic Family",
                            "Broad fallback like serif, sans-serif, or monospace.",
                            "sans-serif"
                        ]
                    ],
                    "caption": "Components of a typical font stack"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Applying Font Family to Text</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n  font-family: 'Open Sans', 'Helvetica Neue', Arial, sans-serif;\n}"
                },
                {
                    "type": "text",
                    "text": "This rule specifies several fallback fonts — the browser uses the first available option in the stack."
                },
                {
                    "type": "text",
                    "text": "<strong>Generic Font Families</strong><br><ul><li><strong>serif:</strong> Fonts with decorative strokes (e.g., Times New Roman).</li><li><strong>sans-serif:</strong> Clean, modern fonts without strokes (e.g., Arial, Roboto).</li><li><strong>monospace:</strong> Fixed-width fonts where all characters align evenly (e.g., Courier New).</li><li><strong>cursive:</strong> Script-style fonts resembling handwriting.</li><li><strong>fantasy:</strong> Stylized, decorative display fonts used sparingly.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Best Practices</strong><br><ul><li>Always include fallback fonts for better cross-platform compatibility.</li><li>Web-safe fonts (like Arial or Verdana) ensure consistent rendering across browsers.</li><li>For custom web fonts, use the <code>@font-face</code> rule or Google Fonts.</li><li>Match font styles to content purpose — readability for paragraphs, distinction for headers.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Using a Google Font</strong>"
                },
                {
                    "type": "code",
                    "language": "html",
                    "code": "<link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap\" rel=\"stylesheet\">\n<style>\n  h1 {\n    font-family: 'Poppins', sans-serif;\n  }\n</style>"
                },
                {
                    "type": "text",
                    "text": "This snippet loads the 'Poppins' font from Google Fonts and applies it to all <h1> elements."
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Think of <code>font-family</code> as your webpage’s <em>voice</em> — it sets the tone and personality for how your content communicates."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li><code>font-family</code> controls the text’s visual style.</li><li>Use multiple font names for fallbacks.</li><li>Generic families ensure graceful degradation.</li><li>Choose readable fonts for accessibility and brand consistency.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-border-property",
        "title": "How can you add a border around an element?",
        "technology": "css",
        "difficulty": "easy",
        "importance": 4,
        "description": "The border property in CSS is used to draw a line around an element’s content, padding, and background. It helps define visual boundaries, emphasize sections, or enhance design aesthetics.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>The <code>border</code> property allows developers to define the style, thickness, and color of borders around elements. You can specify each side’s border individually or use the shorthand form to apply all at once."
                },
                {
                    "type": "list",
                    "columns": [
                        "Property",
                        "Purpose",
                        "Example"
                    ],
                    "rows": [
                        [
                            "border-width",
                            "Sets the thickness of the border.",
                            "border-width: 2px;"
                        ],
                        [
                            "border-style",
                            "Defines the border’s line pattern.",
                            "border-style: solid;"
                        ],
                        [
                            "border-color",
                            "Specifies the border color.",
                            "border-color: #333;"
                        ],
                        [
                            "border",
                            "Shorthand combining width, style, and color.",
                            "border: 2px dashed blue;"
                        ]
                    ],
                    "caption": "Core border properties in CSS"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Adding a Simple Border</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "div.box {\n  border: 3px solid #4CAF50;\n  padding: 20px;\n  background-color: #f9f9f9;\n}"
                },
                {
                    "type": "text",
                    "text": "This creates a 3px solid green border around a <div> while adding internal padding and a light background."
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Customizing Each Side</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "p.note {\n  border-top: 2px solid black;\n  border-right: 2px dotted gray;\n  border-bottom: 2px dashed red;\n  border-left: 2px double blue;\n}"
                },
                {
                    "type": "text",
                    "text": "Each side of the paragraph element uses a unique style and color, demonstrating the flexibility of individual border properties."
                },
                {
                    "type": "text",
                    "text": "<strong>Border Styles</strong><br><ul><li><code>solid</code> – A continuous line.</li><li><code>dashed</code> – Broken dashes.</li><li><code>dotted</code> – Circular dots.</li><li><code>double</code> – Two parallel lines.</li><li><code>groove</code>, <code>ridge</code>, <code>inset</code>, <code>outset</code> – 3D effects based on color shading.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Advanced Tip</strong><br><br>You can also use <code>border-radius</code> to round corners or <code>outline</code> for non-space-consuming visual emphasis. Example:<br><code>border-radius: 10px;</code> creates smooth, rounded corners."
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Think of a border like the <em>frame around a picture</em> — it separates your content from the rest of the page and draws attention where needed."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li>Use <code>border</code> to define a visual frame around elements.</li><li>Combine width, style, and color in one shorthand rule.</li><li>Customize each side with individual border properties.</li><li>Enhance design with <code>border-radius</code> for curved edges.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-margin-property",
        "title": "What does the margin property do?",
        "technology": "css",
        "difficulty": "easy",
        "importance": 4,
        "description": "The margin property in CSS defines the outer spacing around an element. It controls the distance between the element’s border (or edge) and surrounding elements, helping manage layout and visual separation.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>The <code>margin</code> property specifies the space outside an element’s border. It ensures that elements don’t touch each other and maintains a consistent layout structure. Margins are transparent and do not affect an element’s background color or border."
                },
                {
                    "type": "list",
                    "columns": [
                        "Property",
                        "Function",
                        "Example"
                    ],
                    "rows": [
                        [
                            "margin-top",
                            "Adds space above an element.",
                            "margin-top: 20px;"
                        ],
                        [
                            "margin-right",
                            "Adds space to the right side.",
                            "margin-right: 15px;"
                        ],
                        [
                            "margin-bottom",
                            "Adds space below an element.",
                            "margin-bottom: 25px;"
                        ],
                        [
                            "margin-left",
                            "Adds space to the left side.",
                            "margin-left: 10px;"
                        ],
                        [
                            "margin",
                            "Shorthand for all four sides.",
                            "margin: 10px 15px 25px 10px;"
                        ]
                    ],
                    "caption": "Margin properties and shorthand order (top, right, bottom, left)"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Adding Uniform Margin</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "div.card {\n  margin: 20px;\n  border: 1px solid #ccc;\n  padding: 15px;\n  background-color: #fff;\n}"
                },
                {
                    "type": "text",
                    "text": "This code applies equal spacing (20px) around all sides of the card element, creating separation from other nearby elements."
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Asymmetric Margins</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "h1 {\n  margin: 40px 0 20px 0;\n}"
                },
                {
                    "type": "text",
                    "text": "This shorthand adds 40px above the heading, 20px below, and 0 on the sides — perfect for vertical spacing control in typography."
                },
                {
                    "type": "text",
                    "text": "<strong>Special Features</strong><br><ul><li><strong>Auto margins:</strong> Setting <code>margin: 0 auto;</code> horizontally centers block-level elements within their container.</li><li><strong>Collapsing margins:</strong> Adjacent vertical margins between elements may merge into a single value.</li><li><strong>Units:</strong> Margins accept pixels, percentages, ems, and rems for flexible layout control.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Centering a Div Horizontally</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "div.container {\n  width: 60%;\n  margin: 0 auto;\n  background-color: #f2f2f2;\n  padding: 30px;\n}"
                },
                {
                    "type": "text",
                    "text": "The <div> element is centered in its parent container using <code>margin: 0 auto;</code> — a common layout pattern for centered designs."
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Think of <code>margin</code> as the <em>breathing room</em> around an element — it pushes other elements away without affecting the element’s size or appearance."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li>Margins create space outside an element’s border.</li><li>Use <code>margin</code> shorthand for efficiency (top, right, bottom, left).</li><li>Supports <code>auto</code> for horizontal centering.</li><li>Essential for spacing, alignment, and clean design layouts.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-padding-property",
        "title": "What does the padding property do?",
        "technology": "css",
        "difficulty": "easy",
        "importance": 4,
        "description": "The padding property controls the inner spacing between an element’s content and its border. It creates breathing room inside the element without affecting the distance to surrounding elements.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>Padding is the <em>internal</em> space of a box, sitting between the content area (text, images, etc.) and the border. Increasing padding makes the element look larger because the background color and border expand outward to include that extra space."
                },
                {
                    "type": "list",
                    "columns": [
                        "Property",
                        "Purpose",
                        "Example"
                    ],
                    "rows": [
                        [
                            "padding-top",
                            "Space above the content",
                            "padding-top: 16px;"
                        ],
                        [
                            "padding-right",
                            "Space to the content’s right",
                            "padding-right: 12px;"
                        ],
                        [
                            "padding-bottom",
                            "Space below the content",
                            "padding-bottom: 16px;"
                        ],
                        [
                            "padding-left",
                            "Space to the content’s left",
                            "padding-left: 12px;"
                        ],
                        [
                            "padding",
                            "Shorthand for all sides",
                            "padding: 16px 12px;"
                        ]
                    ],
                    "caption": "Padding longhand vs shorthand"
                },
                {
                    "type": "text",
                    "text": "<strong>Shorthand Orders</strong><br><ul><li><strong>Two values:</strong> <code>padding: vertical horizontal;</code></li><li><strong>Three values:</strong> <code>padding: top horizontal bottom;</code></li><li><strong>Four values:</strong> <code>padding: top right bottom left;</code></li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Button with Comfortable Click Area</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".btn {\n  background: #0ea5e9;\n  color: white;\n  padding: 12px 18px; /* top/bottom, left/right */\n  border: none;\n  border-radius: 8px;\n}"
                },
                {
                    "type": "text",
                    "text": "The button’s text gains extra room, increasing touch target size and improving usability."
                },
                {
                    "type": "text",
                    "text": "<strong>Box-Sizing Interaction</strong><br><ul><li>With <code>box-sizing: content-box;</code> (default), padding <em>adds</em> to the declared width/height.</li><li>With <code>box-sizing: border-box;</code>, padding is <em>included</em> inside the declared width/height, making sizing easier.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Responsive Tip</strong><br>Use relative units like <code>em</code> or <code>rem</code> for padding to scale with typography."
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Imagine your element as a framed photo: <em>padding</em> is the mat inside the frame that keeps the picture from touching the frame’s edges."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li>Padding adds inner space inside the element’s border.</li><li>It affects the element’s perceived size and background area.</li><li>Works with box-sizing to determine how widths are calculated.</li><li>Great for improving readability and tap-target sizes.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-margin-vs-padding",
        "title": "What is the difference between margin and padding?",
        "technology": "css",
        "difficulty": "easy",
        "importance": 5,
        "description": "Margin creates space outside an element’s border (separating it from neighbors), while padding creates space inside the border (pushing the content inward). Understanding this distinction is central to mastering layout and the CSS box model.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>Both margin and padding control spacing, but they apply to different regions of the CSS box. <strong>Padding</strong> is <em>inside</em> the element (between content and border), while <strong>margin</strong> is <em>outside</em> the element (between the border and surrounding boxes)."
                },
                {
                    "type": "list",
                    "columns": [
                        "Aspect",
                        "Margin",
                        "Padding"
                    ],
                    "rows": [
                        [
                            "Location",
                            "Outside the border",
                            "Inside the border"
                        ],
                        [
                            "Affects Background",
                            "Transparent (no background color)",
                            "Shares the element’s background"
                        ],
                        [
                            "Layout Impact",
                            "Separates elements from each other",
                            "Increases clickable/visual area within the element"
                        ],
                        [
                            "Collapsing Behavior",
                            "Vertical margins may collapse",
                            "Padding never collapses"
                        ],
                        [
                            "Box-Sizing Effect",
                            "Does not affect content area directly",
                            "Can change perceived size; with content-box it grows the box"
                        ]
                    ],
                    "caption": "Margin vs Padding at a glance"
                },
                {
                    "type": "text",
                    "text": "<strong>Visual Example</strong><br>Consider a <div class=\"card\"> with a border:<br>- <em>Padding</em> pushes the text inward, making the card look roomier.<br>- <em>Margin</em> pushes other elements away from the card, creating separation."
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Comparing Rules</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".card {\n  border: 2px solid #cbd5e1;\n  padding: 16px;  /* inner space */\n  margin: 24px;   /* outer space */\n  background: #ffffff;\n}"
                },
                {
                    "type": "text",
                    "text": "This card has internal breathing room (padding) and is spaced away from neighbors (margin)."
                },
                {
                    "type": "text",
                    "text": "<strong>When to Use Which</strong><br><ul><li>Use <strong>padding</strong> to improve readability or increase tap targets inside buttons, cards, and inputs.</li><li>Use <strong>margin</strong> to control spacing between headings, paragraphs, sections, and components.</li><li>Prefer margin for vertical rhythm between sibling elements; prefer padding for internal layout balance.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Edge Cases</strong><br><ul><li><em>Collapsing margins:</em> adjacent vertical margins (e.g., between two paragraphs) merge to the largest value; padding avoids this.</li><li><em>Outline vs border:</em> margins sit outside both; padding sits inside the border but beneath the outline.</li><li><em>Auto margins:</em> <code>margin: 0 auto;</code> can center block elements horizontally; padding cannot.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Think of a gift box: <strong>padding</strong> is the protective bubble wrap <em>inside</em> the box; <strong>margin</strong> is the space you leave <em>around</em> the box so it doesn’t bump into others."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li>Padding = inner spacing; Margin = outer spacing.</li><li>Padding affects background area; margin is always transparent.</li><li>Margins can collapse vertically; padding cannot.</li><li>Choose based on whether you’re spacing inside the component or between components.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-make-text-bold",
        "title": "How do you make text bold in CSS?",
        "technology": "css",
        "difficulty": "easy",
        "importance": 3,
        "description": "Use the font-weight property to control text thickness. Common values include normal (400) and bold (700), but modern fonts may support a wider numeric range for fine-grained control.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>CSS uses the <code>font-weight</code> property to adjust the thickness of glyphs. You can use keywords like <code>normal</code> and <code>bold</code> or numeric weights like 100–900 when the chosen font supports them."
                },
                {
                    "type": "list",
                    "columns": [
                        "Value",
                        "Meaning",
                        "Notes"
                    ],
                    "rows": [
                        [
                            "normal (400)",
                            "Regular text weight",
                            "Default for most fonts"
                        ],
                        [
                            "bold (700)",
                            "Bold text weight",
                            "Common emphasis weight"
                        ],
                        [
                            "bolder / lighter",
                            "Relative to the parent weight",
                            "Browser computes based on available faces"
                        ],
                        [
                            "100–900",
                            "Numeric weights",
                            "Requires corresponding font faces to render accurately"
                        ]
                    ],
                    "caption": "Common font-weight values"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Bold Headings</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "h1, h2 {\n  font-weight: 700;\n}"
                },
                {
                    "type": "text",
                    "text": "This sets headings to a typical bold weight (700). If the font doesn’t include a 700 face, the browser may simulate bold."
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Variable Fonts with Fine-Grained Control</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "@font-face {\n  font-family: 'InterVar';\n  src: url('Inter-VariableFont_slnt,wght.ttf') format('truetype');\n  font-weight: 100 900;\n  font-style: normal;\n}\n.body-copy {\n  font-family: 'InterVar', system-ui, sans-serif;\n  font-weight: 550; /* mid-weight for better readability */\n}"
                },
                {
                    "type": "text",
                    "text": "Variable fonts allow any numeric value in a supported range, giving precise control over boldness."
                },
                {
                    "type": "text",
                    "text": "<strong>Semantic HTML Reminder</strong><br><ul><li>Use <strong> for semantic importance; style with CSS via <code>strong { font-weight: 700; }</code>.</li><li><b> is purely stylistic; prefer CSS for presentation and keep markup semantic.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Accessibility & Design Tips</strong><br><ul><li>Use bold to create hierarchy, not for entire paragraphs.</li><li>Pair bold text with adequate color contrast; weight alone may not provide sufficient emphasis.</li><li>Check available weights in your chosen font; avoid forcing unsupported weights that degrade rendering.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br><code>font-weight</code> is your <em>volume knob</em> for text — turn it up to make headings stand out, down for body copy comfort."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li>Bold text is controlled via <code>font-weight</code> (e.g., 700 or bold).</li><li>Numeric ranges offer finer control, especially with variable fonts.</li><li>Prefer semantic HTML for meaning and CSS for presentation.</li><li>Use bold sparingly to maintain clear visual hierarchy.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-change-text-size",
        "title": "How do you change the size of text in CSS?",
        "technology": "css",
        "difficulty": "easy",
        "importance": 4,
        "description": "You can control the size of text using the font-size property in CSS. This property defines how large or small the text content appears on a web page and supports both absolute and relative units for flexible design scaling.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>The <code>font-size</code> property sets the height of text characters. It is one of the most frequently used CSS properties and affects the readability, hierarchy, and overall layout of a webpage. You can specify font size in fixed or relative units depending on your design needs."
                },
                {
                    "type": "list",
                    "columns": [
                        "Unit",
                        "Type",
                        "Description"
                    ],
                    "rows": [
                        [
                            "px",
                            "Absolute",
                            "Fixed pixel value. Common for precise control in static layouts."
                        ],
                        [
                            "em",
                            "Relative",
                            "Scales based on the parent element’s font size."
                        ],
                        [
                            "rem",
                            "Relative",
                            "Scales based on the root element (<html>) font size."
                        ],
                        [
                            "%",
                            "Relative",
                            "Percentage relative to the parent’s font size."
                        ],
                        [
                            "vw / vh",
                            "Viewport",
                            "Scales with viewport width or height — great for responsive text."
                        ]
                    ],
                    "caption": "Common font-size units and their behavior"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Basic Text Size</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "p {\n  font-size: 16px;\n}\n\nh1 {\n  font-size: 2em; /* twice the size of parent font */\n}\n\nh2 {\n  font-size: 1.5rem; /* 1.5 times the root font size */\n}"
                },
                {
                    "type": "text",
                    "text": "Here, <code>em</code> and <code>rem</code> units make typography more adaptive to the overall design structure."
                },
                {
                    "type": "text",
                    "text": "<strong>Responsive Typography Tip</strong><br>Modern CSS allows <code>clamp()</code> for fluid scaling:<br><code>font-size: clamp(1rem, 2vw, 2rem);</code> — ensures text stays readable across devices."
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Think of <code>font-size</code> as a zoom level for your text — pixels are rigid, but <code>rem</code> and <code>em</code> scale flexibly with user preferences and layouts."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li>Use <code>font-size</code> to control text height.</li><li>Prefer relative units (<code>rem</code>, <code>em</code>) for accessibility.</li><li>Use <code>clamp()</code> for fluid, responsive text.</li><li>Adjust font-size to maintain visual hierarchy and readability.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-id-vs-class",
        "title": "What is the difference between id and class selectors?",
        "technology": "css",
        "difficulty": "easy",
        "importance": 5,
        "description": "Both id and class are selectors in CSS used to style elements, but they differ in usage, specificity, and reusability. Understanding their distinctions is essential for writing maintainable and efficient CSS.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>In CSS, <strong>id</strong> and <strong>class</strong> selectors target elements for styling or scripting, but they serve different purposes. IDs are unique identifiers for single elements, while classes group multiple elements under a shared style."
                },
                {
                    "type": "list",
                    "columns": [
                        "Aspect",
                        "id Selector",
                        "class Selector"
                    ],
                    "rows": [
                        [
                            "Syntax",
                            "#elementID",
                            ".elementClass"
                        ],
                        [
                            "Uniqueness",
                            "Must be unique per page",
                            "Can be used on multiple elements"
                        ],
                        [
                            "Specificity",
                            "Higher (overrides class styles)",
                            "Lower (can be overridden by id)"
                        ],
                        [
                            "Use Case",
                            "For specific, unique components",
                            "For reusable, shared styles"
                        ],
                        [
                            "Example HTML",
                            "<div id='header'></div>",
                            "<div class='card'></div>"
                        ]
                    ],
                    "caption": "Differences between id and class selectors"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Styling with id and class</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "#header {\n  background: #0ea5e9;\n  color: white;\n}\n\n.card {\n  border: 1px solid #cbd5e1;\n  padding: 12px;\n  border-radius: 6px;\n}"
                },
                {
                    "type": "text",
                    "text": "Here, <code>#header</code> targets a unique section, while <code>.card</code> can style multiple elements throughout the page."
                },
                {
                    "type": "text",
                    "text": "<strong>Best Practices</strong><br><ul><li>Use <code>id</code> for elements that occur only once (like navigation bars or main headers).</li><li>Use <code>class</code> for groups of similar elements that share styling.</li><li>Avoid overusing IDs in CSS — they increase specificity and reduce maintainability.</li><li>Use <code>class</code> selectors in component-based systems like React or Angular for modularity.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Specificity Hierarchy</strong><br>CSS calculates priority using a scoring system. IDs (100 points) outrank classes (10 points). Inline styles override both, but using classes promotes flexibility and scalability."
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Think of <code>id</code> as your unique name (only one of you), and <code>class</code> as your role or group — many people can share the same role."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li><code>id</code> is unique and used once per page.</li><li><code>class</code> is reusable across elements.</li><li>IDs have higher specificity; use sparingly for maintainability.</li><li>Use classes for scalable, component-based design.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-color-property",
        "title": "What is the purpose of the color property?",
        "technology": "css",
        "difficulty": "easy",
        "importance": 3,
        "description": "The color property in CSS defines the foreground color of text content and inline elements. It is essential for creating visual contrast, brand identity, and accessibility in web design.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>The <code>color</code> property controls the text color of an element. It applies to inline content (like text and icons) and can be set using named colors, hexadecimal, RGB, RGBA, HSL, or HSLA values."
                },
                {
                    "type": "list",
                    "columns": [
                        "Format",
                        "Example",
                        "Description"
                    ],
                    "rows": [
                        [
                            "Named Color",
                            "color: red;",
                            "Human-readable and predefined by CSS (e.g., blue, green, black)."
                        ],
                        [
                            "Hexadecimal",
                            "color: #1e3a8a;",
                            "Compact hex codes representing RGB values."
                        ],
                        [
                            "RGB",
                            "color: rgb(30, 58, 138);",
                            "Red, Green, Blue channel definition."
                        ],
                        [
                            "RGBA",
                            "color: rgba(30, 58, 138, 0.8);",
                            "Same as RGB, but with transparency (alpha channel)."
                        ],
                        [
                            "HSL / HSLA",
                            "color: hsl(220, 50%, 40%);",
                            "Hue, Saturation, and Lightness for intuitive color control."
                        ]
                    ],
                    "caption": "Common color formats supported by CSS"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Basic Text Coloring</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "h1 {\n  color: #0ea5e9;\n}\n\np.note {\n  color: rgba(0, 0, 0, 0.7);\n}"
                },
                {
                    "type": "text",
                    "text": "This example gives headings a vivid blue color and paragraphs a slightly transparent black tone for softer contrast."
                },
                {
                    "type": "text",
                    "text": "<strong>Accessibility Considerations</strong><br><ul><li>Ensure sufficient contrast between text color and background for readability.</li><li>Use tools like WCAG contrast checkers to maintain accessibility standards.</li><li>Never rely on color alone to convey meaning (e.g., for errors, also use icons or text).</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Advanced Use</strong><br>You can define custom color variables with CSS custom properties:<br><code>:root { --brand-color: #0ea5e9; }</code><br><code>h1 { color: var(--brand-color); }</code><br>This allows centralized theme management across large projects."
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>The <code>color</code> property is simply your text’s paintbrush — pick any hue, opacity, or tone to match your design’s mood."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li><code>color</code> changes text color and inline content color.</li><li>Supports various color models (Hex, RGB, HSL, etc.).</li><li>Vital for design consistency and accessibility.</li><li>Combine with <code>background-color</code> for complete visual control.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-box-model",
        "title": "What is the box model in CSS?",
        "technology": "css",
        "difficulty": "intermediate",
        "importance": 5,
        "description": "The CSS box model is the foundation of web layout design. Every element in a webpage is represented as a rectangular box composed of four layers: content, padding, border, and margin. Understanding this model is essential for controlling spacing, alignment, and element sizing accurately.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>The CSS box model describes how browsers calculate the size and spacing of elements on a web page. Every visible element is treated as a rectangular box consisting of four nested layers — <em>content, padding, border,</em> and <em>margin</em> — which together define how much space an element occupies and how it interacts with surrounding elements."
                },
                {
                    "type": "list",
                    "columns": [
                        "Layer",
                        "Description",
                        "Affects Background?"
                    ],
                    "rows": [
                        [
                            "Content",
                            "The area where text, images, or child elements are displayed.",
                            "✅ Yes"
                        ],
                        [
                            "Padding",
                            "Space between content and the border; increases inner spacing.",
                            "✅ Yes"
                        ],
                        [
                            "Border",
                            "A visible line that wraps the padding and content.",
                            "✅ Yes"
                        ],
                        [
                            "Margin",
                            "Space between the element and its neighbors; external spacing.",
                            "❌ No"
                        ]
                    ],
                    "caption": "The four layers of the CSS box model"
                },
                {
                    "type": "text",
                    "text": "<strong>Visual Concept</strong><br>Imagine concentric boxes:<br><em>Content</em> → surrounded by <em>Padding</em> → wrapped by <em>Border</em> → finally separated by <em>Margin</em>.<br><br>This structure determines both visual appearance and layout flow."
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "div.box {\n  width: 200px;\n  padding: 20px;\n  border: 5px solid #0ea5e9;\n  margin: 15px;\n}"
                },
                {
                    "type": "text",
                    "text": "In this example:<br><ul><li>Content width = 200px</li><li>Total horizontal space = 200 + (20×2) + (5×2) + (15×2) = 280px</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Box-Sizing Property</strong><br>By default, CSS uses <code>box-sizing: content-box;</code> which excludes padding and border from the declared width/height. Switching to <code>box-sizing: border-box;</code> includes them, making layout calculations simpler and more predictable."
                },
                {
                    "type": "text",
                    "text": "<strong>Best Practices</strong><br><ul><li>Use <code>box-sizing: border-box;</code> globally to simplify layout sizing.</li><li>Apply padding for inner spacing and margin for outer spacing.</li><li>Use developer tools to inspect the box model visually in browsers.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Think of a framed painting: the <em>painting</em> is the content, the <em>matting</em> inside is padding, the <em>frame</em> is the border, and the <em>wall space</em> around it is margin."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li>Every element is a box with content, padding, border, and margin.</li><li>Box model defines total element dimensions and spacing.</li><li><code>box-sizing</code> affects how width and height are computed.</li><li>Understanding it is key for mastering responsive layouts.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-pseudo-classes-elements",
        "title": "What are pseudo-classes and pseudo-elements? Give examples.",
        "technology": "css",
        "difficulty": "intermediate",
        "importance": 5,
        "description": "Pseudo-classes and pseudo-elements extend CSS selectors to style elements based on state or to create virtual elements that do not exist directly in the DOM. They enable powerful interactions, dynamic states, and content generation without additional markup.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>Pseudo-classes and pseudo-elements allow developers to target special states or parts of elements beyond basic selectors. A <strong>pseudo-class</strong> represents a state (like hover or focus), while a <strong>pseudo-element</strong> targets a portion of content (like the first line or a generated content block)."
                },
                {
                    "type": "list",
                    "columns": [
                        "Feature",
                        "Syntax",
                        "Purpose"
                    ],
                    "rows": [
                        [
                            "Pseudo-class",
                            "<code>selector:state</code>",
                            "Targets elements based on user interaction or state."
                        ],
                        [
                            "Pseudo-element",
                            "<code>selector::part</code>",
                            "Selects a specific portion of an element or generates virtual content."
                        ]
                    ],
                    "caption": "Pseudo-class vs Pseudo-element overview"
                },
                {
                    "type": "text",
                    "text": "<strong>Common Pseudo-Classes</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "a:hover {\n  color: #0ea5e9;\n}\ninput:focus {\n  border-color: #2563eb;\n}\nli:first-child {\n  font-weight: bold;\n}"
                },
                {
                    "type": "text",
                    "text": "These respond dynamically to user actions — hover changes color, focus highlights inputs, and first-child styles specific items in a list."
                },
                {
                    "type": "text",
                    "text": "<strong>Common Pseudo-Elements</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "p::first-line {\n  font-weight: bold;\n}\np::before {\n  content: '💡 Note: ';\n  color: #f59e0b;\n}\np::after {\n  content: ' ✔';\n  color: #16a34a;\n}"
                },
                {
                    "type": "text",
                    "text": "Pseudo-elements allow inserting generated content, emphasizing specific portions, or enhancing UX without modifying HTML."
                },
                {
                    "type": "text",
                    "text": "<strong>Notable Differences</strong><br><ul><li>Pseudo-classes use a single colon (<code>:</code>), e.g. <code>:hover</code>.</li><li>Pseudo-elements use a double colon (<code>::</code>) to distinguish structural parts, e.g. <code>::before</code>.</li><li>They can be combined — for instance: <code>a:hover::after</code> adds content only when hovered.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Practical Applications</strong><br><ul><li>Creating tooltips with <code>::after</code> and <code>content</code>.</li><li>Animating buttons on <code>:hover</code> or <code>:active</code>.</li><li>Styling dynamic elements in forms and navigation bars.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Think of <strong>pseudo-classes</strong> as describing <em>when</em> an element behaves differently, and <strong>pseudo-elements</strong> as describing <em>which part</em> of it you’re styling or creating."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li>Pseudo-classes define element states (e.g., :hover, :focus).</li><li>Pseudo-elements define virtual parts (e.g., ::before, ::after).</li><li>Use them to enhance interactivity and add decorative content without extra HTML.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-position-relative-absolute-fixed",
        "title": "What is the difference between position: relative, absolute, and fixed?",
        "technology": "css",
        "difficulty": "intermediate",
        "importance": 5,
        "description": "The position property determines how an element is placed in the document flow. The relative, absolute, and fixed values define how the element’s coordinates are calculated and how it interacts with its surroundings.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>CSS positioning allows you to precisely control where elements appear. The key difference among <code>relative</code>, <code>absolute</code>, and <code>fixed</code> lies in their reference points and whether they occupy space in the normal document flow."
                },
                {
                    "type": "list",
                    "columns": [
                        "Value",
                        "Reference Point",
                        "Affects Document Flow?",
                        "Typical Use"
                    ],
                    "rows": [
                        [
                            "relative",
                            "Itself (original position)",
                            "✅ Yes",
                            "Small offsets without removing from layout."
                        ],
                        [
                            "absolute",
                            "Nearest positioned ancestor (or the document if none)",
                            "❌ No",
                            "Tooltips, popovers, or overlays positioned freely."
                        ],
                        [
                            "fixed",
                            "Viewport (browser window)",
                            "❌ No",
                            "Sticky headers, floating buttons, or navigation bars that stay in view."
                        ]
                    ],
                    "caption": "Comparison of positioning types"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Demonstrating Different Positions</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".relative-box {\n  position: relative;\n  top: 10px; left: 20px;\n}\n\n.absolute-box {\n  position: absolute;\n  top: 10px; left: 20px;\n}\n\n.fixed-box {\n  position: fixed;\n  top: 0; right: 0;\n  background: #0ea5e9;\n  color: white;\n  padding: 10px;\n}"
                },
                {
                    "type": "text",
                    "text": "<ul><li><strong>Relative:</strong> Moves the element relative to its normal spot, but the space it occupies remains reserved.</li><li><strong>Absolute:</strong> Removes the element from the normal flow and positions it based on the nearest ancestor with <code>position</code> set.</li><li><strong>Fixed:</strong> Anchors the element to the viewport, unaffected by scrolling.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Positioning Hierarchy</strong><br><ul><li>Nested <code>absolute</code> elements look for the nearest ancestor with <code>position: relative</code> or <code>absolute</code> to align against.</li><li>Fixed elements always align with the viewport unless inside a transformed parent (e.g., <code>transform: translateZ(0)</code> creates a new stacking context).</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Use Cases</strong><br><ul><li><code>relative</code>: fine-tune an element’s position for minor alignment.</li><li><code>absolute</code>: create dropdown menus or tooltips detached from normal layout flow.</li><li><code>fixed</code>: keep navigation bars or chat buttons visible during scrolling.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Imagine three notes: one pinned in place (<em>fixed</em>), one floating near its section header (<em>absolute</em>), and one slightly nudged but still within its group (<em>relative</em>)."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li><code>relative</code> moves an element without removing it from flow.</li><li><code>absolute</code> removes the element and positions it freely.</li><li><code>fixed</code> locks the element relative to the viewport for persistent visibility.</li><li>Choosing the right positioning is essential for precise UI layouts and responsive design.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-display-flex",
        "title": "What does display: flex do?",
        "technology": "css",
        "difficulty": "intermediate",
        "importance": 5,
        "description": "The display: flex property enables the flexbox layout model, which allows elements within a container to align, distribute, and resize themselves dynamically. It simplifies responsive design by providing precise control over spacing, alignment, and ordering without relying on floats or manual calculations.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>The <code>display: flex;</code> property turns an element into a <em>flex container</em> and its direct children into <em>flex items</em>. It enables a one-dimensional layout system, meaning it organizes content along either a <em>row</em> or a <em>column</em> while giving developers control over alignment, spacing, and reordering."
                },
                {
                    "type": "list",
                    "columns": [
                        "Property",
                        "Purpose",
                        "Example"
                    ],
                    "rows": [
                        [
                            "display: flex",
                            "Creates a block-level flex container",
                            "div.container { display: flex; }"
                        ],
                        [
                            "display: inline-flex",
                            "Creates an inline-level flex container",
                            "span.group { display: inline-flex; }"
                        ]
                    ],
                    "caption": "Flex container initialization types"
                },
                {
                    "type": "text",
                    "text": "<strong>Main Concepts</strong><br><ul><li><strong>Main axis:</strong> Defines direction of flex items (horizontal by default).</li><li><strong>Cross axis:</strong> Perpendicular to main axis (vertical by default).</li><li><strong>Flex container:</strong> The parent element controlling layout.</li><li><strong>Flex items:</strong> Direct children that flex and adapt.</li></ul>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.item {\n  flex: 1;\n  margin: 10px;\n}"
                },
                {
                    "type": "text",
                    "text": "In this layout, flex items distribute evenly across the main axis, maintaining equal spacing and vertical alignment without explicit width definitions."
                },
                {
                    "type": "text",
                    "text": "<strong>Key Flexbox Properties</strong><br><ul><li><code>flex-direction</code> — Sets item flow (row, column, row-reverse, column-reverse).</li><li><code>justify-content</code> — Aligns items along the main axis (start, center, space-between, etc.).</li><li><code>align-items</code> — Aligns items along the cross axis.</li><li><code>flex-wrap</code> — Allows items to wrap onto multiple lines when space runs out.</li><li><code>align-content</code> — Controls spacing between wrapped lines.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Advanced: The Flex Shorthand</strong><br><code>flex: 1 1 200px;</code> expands to <code>flex-grow</code>, <code>flex-shrink</code>, and <code>flex-basis</code> respectively.<br><ul><li><code>flex-grow</code>: how much an item can expand relative to siblings.</li><li><code>flex-shrink</code>: how much an item can shrink when space is tight.</li><li><code>flex-basis</code>: the item’s default size before flexing.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Use Cases</strong><br><ul><li>Responsive navigation bars with evenly spaced items.</li><li>Vertical centering without absolute positioning.</li><li>Card grids that adjust automatically to viewport size.</li><li>Dynamic layouts without float or table hacks.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Think of flexbox as a smart row or column that automatically distributes space and alignment, saving you from writing complex manual CSS rules."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li><code>display: flex</code> activates flexbox layout mode.</li><li>It provides alignment, distribution, and resizing capabilities.</li><li>Supports responsive and mobile-first design with minimal code.</li><li>Perfect for modern UI components like navbars, cards, and toolbars.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-z-index",
        "title": "How does z-index work in CSS?",
        "technology": "css",
        "difficulty": "intermediate",
        "importance": 5,
        "description": "The z-index property controls the stacking order of overlapping elements. It determines which elements appear above or below others along the z-axis — the imaginary vertical axis perpendicular to the screen.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>The <code>z-index</code> property specifies the stacking order of positioned elements (elements with <code>position</code> other than static). Elements with higher z-index values appear on top of those with lower values when they overlap."
                },
                {
                    "type": "list",
                    "columns": [
                        "Value Type",
                        "Example",
                        "Meaning"
                    ],
                    "rows": [
                        [
                            "Auto",
                            "z-index: auto;",
                            "Default stacking within the same context."
                        ],
                        [
                            "Positive Integer",
                            "z-index: 10;",
                            "Element appears above those with smaller values."
                        ],
                        [
                            "Negative Integer",
                            "z-index: -1;",
                            "Element appears below normal stacking order."
                        ]
                    ],
                    "caption": "Common z-index values and effects"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Layering Elements</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".box1 { position: relative; z-index: 1; background: lightblue; }\n.box2 { position: relative; z-index: 2; background: coral; }\n.box3 { position: relative; z-index: 0; background: lightgreen; }"
                },
                {
                    "type": "text",
                    "text": "In this example, <code>.box2</code> appears above <code>.box1</code> and <code>.box3</code> because it has the highest z-index value."
                },
                {
                    "type": "text",
                    "text": "<strong>Stacking Context</strong><br>Each positioned element with a <code>z-index</code> forms a new stacking context. Elements inside one context are layered relative to each other but cannot overlap elements outside that context. Contexts are created by certain properties like:<br><ul><li><code>position</code> (relative, absolute, fixed) with z-index.</li><li><code>opacity: 1</code></li><li><code>transform</code>, <code>filter</code>, or <code>perspective</code>.</li><li><code>isolation: isolate;</code></li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Common Pitfalls</strong><br><ul><li>Setting <code>z-index</code> on an element without a positioning context (e.g., <code>position: static</code>) has no effect.</li><li>Nested stacking contexts can cause confusion — an element may appear behind another even if it has a higher z-index, depending on its parent’s context.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Debugging Tip</strong><br>Use browser developer tools to inspect stacking contexts. Understanding which context your element belongs to is key to resolving unexpected layering issues."
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Think of z-index like layers in Photoshop — each element lives on a sheet. The higher the z-index, the closer to your eyes it appears. But if it's in a different folder (stacking context), it can’t overlap layers in another folder."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li><code>z-index</code> controls visual stacking of positioned elements.</li><li>Works only inside stacking contexts.</li><li>Higher values appear above lower ones.</li><li>Context isolation can cause seemingly incorrect overlaps — always check parent elements.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-visibility-vs-display",
        "title": "What is the difference between visibility: hidden and display: none?",
        "technology": "css",
        "difficulty": "intermediate",
        "importance": 5,
        "description": "Both visibility and display control element rendering in CSS, but they behave differently. visibility: hidden hides the element visually while preserving its layout space, whereas display: none removes the element completely from the document flow.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>The <code>visibility</code> and <code>display</code> properties determine whether elements appear and how they affect layout. They differ in whether the element continues to occupy space or not."
                },
                {
                    "type": "list",
                    "columns": [
                        "Property",
                        "Effect",
                        "Layout Impact",
                        "Can Be Animated?"
                    ],
                    "rows": [
                        [
                            "visibility: hidden",
                            "Element is invisible but still occupies space",
                            "✅ Yes, layout remains intact",
                            "✅ Yes (opacity transitions possible)"
                        ],
                        [
                            "display: none",
                            "Element is completely removed from layout flow",
                            "❌ No space reserved",
                            "❌ No (toggle only on re-render)"
                        ]
                    ],
                    "caption": "Comparison of visibility: hidden vs display: none"
                },
                {
                    "type": "text",
                    "text": "<strong>Example Comparison</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".hidden-element {\n  visibility: hidden; /* Space remains occupied */\n}\n\n.none-element {\n  display: none; /* Removed from layout entirely */\n}"
                },
                {
                    "type": "text",
                    "text": "In this scenario, the <code>.hidden-element</code> will not be visible but its space will remain. The <code>.none-element</code> will collapse and other elements will move up to fill its place."
                },
                {
                    "type": "text",
                    "text": "<strong>Accessibility Implications</strong><br><ul><li><code>visibility: hidden</code> elements are usually not focusable and hidden from assistive technologies.</li><li><code>display: none</code> elements are completely removed from the accessibility tree.</li><li>Use <code>aria-hidden='true'</code> explicitly when managing visibility dynamically for accessibility compliance.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Performance & Animations</strong><br><ul><li>Use <code>visibility</code> when you need to hide/show elements smoothly with transitions (opacity fade).</li><li>Use <code>display</code> when you need to completely remove elements from the document flow (e.g., dropdown menus).</li><li>Combining both (<code>opacity</code> + <code>pointer-events: none</code>) can create interactive fade effects without layout jumps.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br><code>visibility: hidden</code> is like making a ghost — you can’t see it, but it still exists in the room. <code>display: none</code> is like removing the object from the room entirely."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li><code>visibility: hidden</code> hides elements but keeps layout space reserved.</li><li><code>display: none</code> removes elements from both view and flow.</li><li>Use <code>visibility</code> for smooth transitions, <code>display</code> for structural layout changes.</li><li>Always handle visibility with accessibility in mind when toggling UI elements.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-float-clear",
        "title": "What is the purpose of the float and clear properties?",
        "technology": "css",
        "difficulty": "intermediate",
        "importance": 5,
        "description": "The float and clear properties are part of CSS's early layout system used to wrap text around images and create multi-column designs before flexbox and grid. The float property allows elements to shift to the left or right of their container, while the clear property prevents elements from wrapping around floated elements.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>Originally designed for print-style text wrapping, <code>float</code> and <code>clear</code> were later repurposed for web layouts before modern techniques like flexbox and grid. <code>float</code> moves elements to one side of their container, allowing text and inline elements to flow around them. <code>clear</code> ensures that subsequent elements do not wrap around floated elements."
                },
                {
                    "type": "list",
                    "columns": [
                        "Property",
                        "Values",
                        "Purpose"
                    ],
                    "rows": [
                        [
                            "float",
                            "left | right | none | inline-start | inline-end",
                            "Moves an element to one side, allowing surrounding content to wrap around it."
                        ],
                        [
                            "clear",
                            "left | right | both | none",
                            "Prevents elements from appearing next to floated elements on specified sides."
                        ]
                    ],
                    "caption": "Float and clear property overview"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Floating an Image</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "img {\n  float: right;\n  margin: 10px;\n}\np {\n  text-align: justify;\n}"
                },
                {
                    "type": "text",
                    "text": "In this example, the image floats to the right, and text flows naturally around it, similar to magazine-style layouts."
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Clearing Floats</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".footer {\n  clear: both;\n  background: #e2e8f0;\n  padding: 10px;\n}"
                },
                {
                    "type": "text",
                    "text": "This ensures the footer starts below all floated elements, rather than wrapping beside them."
                },
                {
                    "type": "text",
                    "text": "<strong>Common Issue: Collapsing Parent Containers</strong><br><br>Floated child elements are removed from normal document flow, which may cause parent containers to collapse in height. This can be fixed using a clearfix method:<br><br><code>.clearfix::after { content: ''; display: block; clear: both; }</code>"
                },
                {
                    "type": "text",
                    "text": "<strong>Modern Alternatives</strong><br><ul><li>Use <code>display: flex;</code> for horizontal alignment and responsive layouts.</li><li>Use <code>float</code> today primarily for text wrapping around media, not layout structure.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br><code>float</code> is like placing a photo in a newspaper column — text wraps around it. <code>clear</code> tells the next paragraph, “don’t sit beside the photo; start below it.”"
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li><code>float</code> positions elements left or right, letting text wrap around them.</li><li><code>clear</code> stops wrapping on specified sides.</li><li>Useful for images, text flows, and minor alignments — not complex layouts.</li><li>Modern layouts prefer flexbox or grid for greater control.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-specificity-hierarchy",
        "title": "How do CSS selectors with higher specificity override others?",
        "technology": "css",
        "difficulty": "intermediate",
        "importance": 5,
        "description": "Specificity determines which CSS rule takes precedence when multiple rules target the same element. Each selector type contributes a different weight, and higher specificity overrides lower ones regardless of source order (except when !important is used).",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>When multiple CSS rules apply to the same element, the browser resolves conflicts using <em>specificity</em>. Specificity is calculated based on the selector’s type — IDs, classes, attributes, and element names each contribute differently to its weight."
                },
                {
                    "type": "list",
                    "columns": [
                        "Selector Type",
                        "Example",
                        "Specificity Weight"
                    ],
                    "rows": [
                        [
                            "Inline Styles",
                            "style='color: red;'",
                            "1000"
                        ],
                        [
                            "ID Selectors",
                            "#header",
                            "100"
                        ],
                        [
                            "Class, Attribute, or Pseudo-class",
                            ".btn, [type='text'], :hover",
                            "10"
                        ],
                        [
                            "Element or Pseudo-element",
                            "div, p, ::before",
                            "1"
                        ],
                        [
                            "Universal or Inherited",
                            "* or inherited styles",
                            "0"
                        ]
                    ],
                    "caption": "Specificity scoring system"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Competing Rules</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "p { color: blue; }       /* 1 */\n.text { color: green; }  /* 10 */\n#intro { color: red; }   /* 100 */"
                },
                {
                    "type": "text",
                    "text": "In this case, <code>#intro</code> (specificity 100) overrides <code>.text</code> (10) and <code>p</code> (1), resulting in red text."
                },
                {
                    "type": "text",
                    "text": "<strong>Special Case: !important</strong><br><br>The <code>!important</code> flag overrides all other specificity rules except inline styles with <code>!important</code>. Overusing it can lead to maintenance headaches, so use it sparingly and strategically."
                },
                {
                    "type": "text",
                    "text": "<strong>Calculation Formula</strong><br>Specificity is commonly represented as a four-part value (a,b,c,d):<br><ul><li><strong>a</strong> – Inline styles (1 if present)</li><li><strong>b</strong> – Number of IDs</li><li><strong>c</strong> – Number of classes, attributes, pseudo-classes</li><li><strong>d</strong> – Number of element names and pseudo-elements</li></ul><br>Example: <code>#nav .menu li:hover</code> → (0,1,2,1) → Specificity = 121."
                },
                {
                    "type": "text",
                    "text": "<strong>Best Practices</strong><br><ul><li>Keep selectors simple and avoid chaining too many elements or classes.</li><li>Use class-based selectors for scalability instead of IDs.</li><li>Reserve <code>!important</code> for utility classes or third-party overrides.</li><li>Refactor conflicting styles rather than stacking specificity.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Think of specificity like a ranking system — inline styles are presidents, IDs are generals, classes are officers, and element selectors are soldiers. The higher rank always wins the battle for styling control."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li>Specificity determines which CSS rule is applied when conflicts occur.</li><li>Calculated based on selector type weights.</li><li>Higher values override lower ones.</li><li>Use classes over IDs for maintainable and modular codebases.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-media-queries",
        "title": "What are media queries and why are they used?",
        "technology": "css",
        "difficulty": "intermediate",
        "importance": 5,
        "description": "Media queries are conditional CSS rules that apply styles based on device characteristics such as screen size, resolution, or orientation. They are the foundation of responsive web design, allowing content to adapt to various devices and viewports.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>Media queries enable developers to define different styles depending on the device’s capabilities. This allows webpages to look and function optimally across desktops, tablets, and smartphones, forming the backbone of responsive design."
                },
                {
                    "type": "list",
                    "columns": [
                        "Feature",
                        "Example",
                        "Purpose"
                    ],
                    "rows": [
                        [
                            "min-width",
                            "@media (min-width: 768px)",
                            "Applies when the viewport is at least 768px wide."
                        ],
                        [
                            "max-width",
                            "@media (max-width: 600px)",
                            "Applies when the viewport is 600px wide or less."
                        ],
                        [
                            "orientation",
                            "@media (orientation: landscape)",
                            "Applies styles for landscape or portrait mode."
                        ],
                        [
                            "resolution",
                            "@media (min-resolution: 300dpi)",
                            "Targets high-resolution (Retina) displays."
                        ]
                    ],
                    "caption": "Common media query conditions"
                },
                {
                    "type": "text",
                    "text": "<strong>Example: Responsive Layout</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n  font-size: 16px;\n}\n@media (max-width: 768px) {\n  body {\n    font-size: 14px;\n  }\n}\n@media (max-width: 480px) {\n  body {\n    font-size: 12px;\n  }\n}"
                },
                {
                    "type": "text",
                    "text": "This example adjusts the text size for tablets and mobile screens, improving readability on smaller devices."
                },
                {
                    "type": "text",
                    "text": "<strong>Combining Conditions</strong><br>Media queries can combine multiple conditions using logical operators:<br><ul><li><code>and</code> – combine features (<code>@media (min-width: 600px) and (orientation: landscape)</code>).</li><li><code>not</code> – exclude specific conditions.</li><li><code>only</code> – prevent older browsers from applying the rule.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Mobile-First Approach</strong><br>Modern best practice is to start with default (mobile) styles and add media queries for larger viewports. This ensures faster rendering and fewer overrides:<br><br><code>@media (min-width: 768px) { /* tablet styles */ }</code><br><code>@media (min-width: 1024px) { /* desktop styles */ }</code>"
                },
                {
                    "type": "text",
                    "text": "<strong>Advanced Features</strong><br><ul><li>Media queries support <em>prefers-color-scheme</em> for dark/light mode.</li><li><em>prefers-reduced-motion</em> helps accessibility by disabling animations for users who prefer reduced motion.</li><li>Container queries (in modern browsers) extend this concept to parent element widths rather than the viewport.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Think of media queries as smart CSS switches — they turn on or off specific styles depending on the screen’s size or features, just like adaptive headlights adjusting to road conditions."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li>Media queries adapt designs to different screen sizes and device capabilities.</li><li>Essential for responsive design and accessibility.</li><li>Support conditions like width, orientation, resolution, and user preferences.</li><li>Combine with a mobile-first strategy for performance and scalability.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-make-element-responsive",
        "title": "How can you make an element responsive using CSS?",
        "technology": "css",
        "difficulty": "intermediate",
        "importance": 5,
        "description": "Making an element responsive means it adapts fluidly to different screen sizes, container widths, and user settings. Core techniques include fluid sizing, flexible media, modern layout systems (flexbox/grid), media and container queries, responsive typography, and intrinsic sizing utilities like aspect-ratio.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>A responsive element <em>resizes and reflows</em> gracefully across devices. CSS enables this with fluid units (%, vw, rem), max-width constraints, flexible media (<img>, <video>), layout primitives (flexbox, grid), and conditional rules (media or container queries). The goal is to avoid fixed dimensions and let the element <em>adapt</em> to its environment."
                },
                {
                    "type": "list",
                    "columns": [
                        "Technique",
                        "What It Does",
                        "Typical Snippet"
                    ],
                    "rows": [
                        [
                            "Fluid width",
                            "Lets the element scale with its container",
                            "div.card { width: 100%; max-width: 680px; }"
                        ],
                        [
                            "Flexible media",
                            "Prevents images/videos from overflowing",
                            "img, video { max-width: 100%; height: auto; }"
                        ],
                        [
                            "Responsive typography",
                            "Scales text across viewports",
                            "h1 { font-size: clamp(1.5rem, 2.5vw, 3rem); }"
                        ],
                        [
                            "Modern layout",
                            "Reflows children without fixed columns",
                            ".grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(16rem, 1fr)); gap: 1rem; }"
                        ],
                        [
                            "Aspect ratio",
                            "Keeps visuals proportional",
                            ".media { aspect-ratio: 16 / 9; }"
                        ],
                        [
                            "Media queries",
                            "Adjusts styles at viewport breakpoints",
                            "@media (min-width: 768px) { .card { padding: 2rem; } }"
                        ],
                        [
                            "Container queries",
                            "Responds to container width (not viewport)",
                            "@container (min-width: 600px) { .card > .meta { display: grid; } }"
                        ]
                    ],
                    "caption": "Common CSS tools for responsive elements"
                },
                {
                    "type": "text",
                    "text": "<strong>Example 1: Fluid Card Component</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".card {\n  box-sizing: border-box;\n  width: min(100%, 68ch);         /* fluid but capped for readability */\n  margin: 1rem auto;\n  padding: clamp(1rem, 2vw, 2rem); /* responsive spacing */\n  border: 1px solid #e5e7eb;\n  border-radius: 12px;\n}\n.card img {\n  display: block;\n  width: 100%;\n  height: auto;                  /* flexible media */\n  border-radius: 12px 12px 0 0;\n}\n.card h2 { font-size: clamp(1.25rem, 2vw, 1.75rem); }\n.card p  { font-size: clamp(1rem, 1.2vw, 1.125rem); line-height: 1.6; }"
                },
                {
                    "type": "text",
                    "text": "The card scales up to 68ch (roughly 68 characters), uses responsive padding, and ensures its image never overflows."
                },
                {
                    "type": "text",
                    "text": "<strong>Example 2: Responsive Grid Without Breakpoints</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".gallery {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(14rem, 1fr));\n  gap: 1rem;\n}\n.gallery > div { background: #f8fafc; padding: 1rem; border-radius: 10px; }"
                },
                {
                    "type": "text",
                    "text": "Using <code>auto-fit</code> and <code>minmax</code>, the gallery naturally fills the row with as many columns as fit, collapsing to fewer columns on small screens — no media queries required."
                },
                {
                    "type": "text",
                    "text": "<strong>Example 3: Media Queries (Mobile-First)</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".layout { display: grid; gap: 1rem; }\n/* Base: single column on small viewports */\n.layout { grid-template-columns: 1fr; }\n/* Enhance at tablet and up */\n@media (min-width: 768px) { .layout { grid-template-columns: 1fr 2fr; } }\n/* Desktop and up */\n@media (min-width: 1024px) { .layout { grid-template-columns: 1fr 3fr; } }"
                },
                {
                    "type": "text",
                    "text": "Start with a simple, accessible single-column layout, then progressively enhance for wider screens."
                },
                {
                    "type": "text",
                    "text": "<strong>Example 4: Container Queries (Element-Driven)</strong><br><em>Requires browsers with container query support.</em> Wrap the element in a queryable container so it adapts to its parent’s size rather than the viewport."
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".card-wrap { container-type: inline-size; }\n.card {\n  display: grid;\n  grid-template-columns: 1fr;\n}\n@container (min-width: 520px) {\n  .card { grid-template-columns: 2fr 3fr; gap: 1rem; }\n}"
                },
                {
                    "type": "text",
                    "text": "Now the card switches to a two-column layout only when <em>its container</em> is wide enough, making it portable across different page regions."
                },
                {
                    "type": "text",
                    "text": "<strong>Responsive Media & Aspect Ratio</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".media { aspect-ratio: 16 / 9; width: 100%; background: #e2e8f0; }\n.media > iframe, .media > img, .media > video { width: 100%; height: 100%; object-fit: cover; }"
                },
                {
                    "type": "text",
                    "text": "The <code>aspect-ratio</code> property preserves proportions while <code>object-fit: cover</code> keeps visuals neatly cropped without distortion."
                },
                {
                    "type": "text",
                    "text": "<strong>Responsive Typography & Spacing</strong><br>Use fluid and clamped values for readable, accessible scaling."
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ":root { font-size: 100%; }\nmain { padding-inline: clamp(1rem, 4vw, 3rem); }\nh1   { font-size: clamp(1.75rem, 3.5vw, 2.5rem); }\np    { font-size: clamp(1rem, 1.2vw, 1.125rem); line-height: 1.6; }"
                },
                {
                    "type": "text",
                    "text": "<strong>Images: srcset & sizes (bonus)</strong><br>For <img>, supply multiple resolutions so the browser picks the best fit for the current layout."
                },
                {
                    "type": "code",
                    "language": "html",
                    "code": "<img\n  src=\"hero-800.jpg\"\n  srcset=\"hero-480.jpg 480w, hero-800.jpg 800w, hero-1200.jpg 1200w\"\n  sizes=\"(max-width: 600px) 480px, (max-width: 1000px) 800px, 1200px\"\n  alt=\"Product hero\" />"
                },
                {
                    "type": "text",
                    "text": "<strong>Performance & Accessibility Tips</strong><br><ul><li>Prefer mobile-first CSS; add features as space allows.</li><li>Avoid fixed widths/heights; use fluid constraints (<code>max-width</code>, <code>min()</code>, <code>max()</code>, <code>clamp()</code>).</li><li>Use <code>box-sizing: border-box;</code> to make sizing more predictable.</li><li>Respect user preferences: <code>@media (prefers-reduced-motion)</code>, <code>(prefers-color-scheme)</code>.</li><li>Test component responsiveness within various container widths, not just the viewport.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> <strong>Still so complicated?</strong><br><br>Think of responsiveness as giving your element <em>elastic edges</em>: it stretches within sensible limits, reflows content when it needs more room, and never breaks its shape."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li>Make elements fluid with <code>width: 100%</code> + sensible <code>max-width</code>.</li><li>Keep media flexible (<code>max-width: 100%</code>; <code>aspect-ratio</code>).</li><li>Use flexbox/grid for natural reflow; <code>minmax()</code> and <code>auto-fit/auto-fill</code> shine.</li><li>Apply media <em>and</em> container queries to adapt to environment.</li><li>Adopt fluid typography and spacing with <code>clamp()</code>.</li></ul>"
                }
            ]
        }
    },
    {
        "id": "css-units-em-rem-percent-px",
        "title": "Explain the difference between em, rem, %, and px units.",
        "technology": "css",
        "difficulty": "intermediate",
        "importance": 5,
        "description": "CSS provides multiple units to define sizes, each with unique reference points and use cases. Understanding how em, rem, %, and px differ is essential for creating flexible, responsive layouts that behave consistently across devices and containers.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>CSS measurement units define the scale and adaptability of design elements. Absolute units like <code>px</code> are fixed, while relative units like <code>em</code>, <code>rem</code>, and <code>%</code> scale dynamically based on font size or parent dimensions."
                },
                {
                    "type": "list",
                    "columns": [
                        "Unit",
                        "Definition",
                        "Reference Context",
                        "Common Use"
                    ],
                    "rows": [
                        [
                            "px",
                            "Pixel — absolute unit representing a device-independent pixel",
                            "Screen pixel grid",
                            "Precise layouts, borders, or icons"
                        ],
                        [
                            "em",
                            "Relative to the font size of the current element",
                            "Parent element’s font size",
                            "Padding, spacing, or text sizing that scales with parent"
                        ],
                        [
                            "rem",
                            "Relative to the font size of the root element (<html>)",
                            "Root element (usually 16px)",
                            "Consistent typography across app"
                        ],
                        [
                            "%",
                            "Relative to the size of the parent container",
                            "Parent’s width or height",
                            "Fluid layouts, widths, or positioning"
                        ]
                    ],
                    "caption": "Comparison of common CSS units"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "html { font-size: 16px; }\n.container { font-size: 1.25rem; /* 20px */ }\n.card { font-size: 1em; /* 20px relative to .container */\n  padding: 2em; /* 40px */\n  width: 80%; /* 80% of container width */\n  border: 2px solid #333; /* 2px fixed border */ }"
                },
                {
                    "type": "text",
                    "text": "<strong>Best Practices</strong><br><ul><li>Use <code>rem</code> for typography — it ensures consistent scaling across components.</li><li>Use <code>em</code> when nested scaling is desired (e.g., buttons inheriting parent font size).</li><li>Use <code>%</code> for flexible containers that resize with viewport or parent.</li><li>Use <code>px</code> only when precision is required (borders, shadows, small icons).</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> Think of <code>em</code> as ‘relative to the element,’ <code>rem</code> as ‘relative to the root,’ <code>%</code> as ‘relative to the parent,’ and <code>px</code> as ‘fixed and absolute.’"
                }
            ]
        }
    },
    {
        "id": "css-cascade-order",
        "title": "How does the CSS cascade determine which styles are applied?",
        "technology": "css",
        "difficulty": "intermediate",
        "importance": 5,
        "description": "The CSS cascade determines the final styles applied to an element when multiple rules conflict. It resolves conflicts based on origin, importance, specificity, and source order, ensuring predictable and hierarchical style application.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>The cascade is the algorithm browsers use to combine styles from different sources. When multiple rules target the same element, CSS evaluates them using a four-step hierarchy: <em>importance, origin, specificity, and order of appearance.</em>"
                },
                {
                    "type": "list",
                    "columns": [
                        "Step",
                        "Concept",
                        "Explanation"
                    ],
                    "rows": [
                        [
                            "1",
                            "Importance",
                            "Rules marked with <code>!important</code> override normal declarations."
                        ],
                        [
                            "2",
                            "Origin",
                            "Inline styles > author stylesheets > user stylesheets > browser defaults."
                        ],
                        [
                            "3",
                            "Specificity",
                            "More specific selectors take precedence (e.g., IDs > classes > elements)."
                        ],
                        [
                            "4",
                            "Source Order",
                            "When all else is equal, the rule defined last in the CSS wins."
                        ]
                    ],
                    "caption": "CSS cascade resolution steps"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": "p { color: blue; }          /* element selector */\n.text { color: green; }    /* class selector */\n#intro { color: red; }     /* ID selector */\np { color: purple !important; } /* overrides all */"
                },
                {
                    "type": "text",
                    "text": "<strong>Result:</strong> The <code>!important</code> rule wins even though the ID selector is more specific. Without <code>!important</code>, the ID selector would take priority."
                },
                {
                    "type": "text",
                    "text": "<strong>Best Practices</strong><br><ul><li>Keep selectors consistent and avoid unnecessary complexity.</li><li>Minimize use of <code>!important</code>; rely on proper structure and specificity instead.</li><li>Understand how frameworks (e.g., Bootstrap) use cascade layers and resets.</li><li>Use the browser’s ‘Computed Styles’ panel to debug cascading conflicts.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> The cascade is like a courtroom: importance is the judge, specificity is the lawyer’s strength, and source order is who speaks last."
                }
            ]
        }
    },
    {
        "id": "css-custom-properties",
        "title": "What are CSS custom properties (variables) and how are they used?",
        "technology": "css",
        "difficulty": "intermediate",
        "importance": 5,
        "description": "CSS custom properties, also known as variables, let developers define reusable values that can be dynamically updated and inherited across components. They enable theme systems, runtime customization, and cleaner maintainable code.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>CSS custom properties are variables defined with the <code>--</code> prefix and accessed using the <code>var()</code> function. They differ from preprocessor variables (like SASS or LESS) because they’re live in the browser — inheritable, changeable with JavaScript, and scoped within selectors."
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ":root {\n  --main-color: #0070f3;\n  --accent-color: #ff4081;\n  --spacing: 1.5rem;\n}\n\nbutton {\n  background-color: var(--main-color);\n  color: white;\n  padding: var(--spacing);\n  border: none;\n  border-radius: 8px;\n}\n\nbutton:hover {\n  background-color: var(--accent-color);\n}"
                },
                {
                    "type": "text",
                    "text": "<strong>Scoping & Inheritance</strong><br>Variables defined in <code>:root</code> are global. They can be overridden locally inside specific components or containers, enabling theming or context-aware customization."
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".dark-theme {\n  --main-color: #222;\n  --accent-color: #0ff;\n}\n\n.card { background-color: var(--main-color); color: var(--accent-color); }"
                },
                {
                    "type": "text",
                    "text": "<strong>Dynamic Updates with JavaScript</strong><br>Unlike preprocessor variables, custom properties exist in the DOM and can be modified at runtime."
                },
                {
                    "type": "code",
                    "language": "javascript",
                    "code": "document.documentElement.style.setProperty('--main-color', '#e63946');"
                },
                {
                    "type": "text",
                    "text": "<strong>Fallback Values</strong><br>Use fallback values when a variable might not exist:<br><code>color: var(--heading-color, #333);</code>"
                },
                {
                    "type": "text",
                    "text": "<strong>Best Practices</strong><br><ul><li>Define global tokens in <code>:root</code> for theme consistency.</li><li>Use local overrides for component variants or dark/light modes.</li><li>Combine with media queries for responsive design (<code>@media (prefers-color-scheme: dark)</code>).</li><li>Maintain a naming convention like <code>--color-primary</code>, <code>--spacing-md</code>.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> Custom properties are like CSS ‘globals’ that react dynamically to context — perfect for modern design systems and theme engines."
                }
            ]
        }
    },
    {
        "id": "css-grid-vs-flexbox",
        "title": "What is the difference between Grid and Flexbox, and when should each be used?",
        "technology": "css",
        "difficulty": "intermediate",
        "importance": 5,
        "description": "CSS Grid and Flexbox are both powerful layout systems designed to help developers create complex, responsive layouts with ease. While Flexbox excels in one-dimensional layouts (either rows or columns), Grid is built for two-dimensional layouts (rows and columns simultaneously). Understanding when to use each is key to writing efficient, scalable, and maintainable CSS.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>Both <code>Flexbox</code> and <code>Grid</code> are modern CSS layout tools, but they serve different purposes. Flexbox is a <em>one-dimensional</em> system optimized for aligning items along a single axis, whereas Grid is a <em>two-dimensional</em> system that allows precise control over both rows and columns. Together, they form the backbone of modern responsive layout design."
                },
                {
                    "type": "list",
                    "columns": [
                        "Feature",
                        "Flexbox",
                        "Grid"
                    ],
                    "rows": [
                        [
                            "Primary Dimension",
                            "One-dimensional (row <em>or</em> column)",
                            "Two-dimensional (rows <em>and</em> columns)"
                        ],
                        [
                            "Main Use Case",
                            "Aligning elements in a line, e.g., navbars, buttons, or media objects",
                            "Complex layouts such as dashboards, galleries, or forms"
                        ],
                        [
                            "Content Flow",
                            "Content-first: items adjust based on available space",
                            "Layout-first: defines fixed grid structure regardless of content size"
                        ],
                        [
                            "Alignment Tools",
                            "justify-content, align-items, align-self",
                            "justify-items, align-items, grid-template-areas, grid-gap"
                        ],
                        [
                            "Explicit Placement",
                            "Items flow naturally; order can be changed with <code>order</code>",
                            "Items can be explicitly placed using row/column coordinates"
                        ],
                        [
                            "Responsiveness",
                            "Ideal for adaptive and wrapping layouts",
                            "Ideal for responsive design using <code>auto-fit</code> and <code>minmax()</code>"
                        ],
                        [
                            "Complexity",
                            "Simpler syntax, great for linear alignment",
                            "More declarative but powerful for structured grids"
                        ]
                    ],
                    "caption": "Comparison between Flexbox and Grid layout systems"
                },
                {
                    "type": "text",
                    "text": "<strong>Example 1: Flexbox for a Navigation Bar</strong><br>Flexbox works best when the layout is linear, such as aligning buttons or links horizontally or vertically."
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".navbar {\n  display: flex;\n  justify-content: space-between; /* distribute nav items evenly */\n  align-items: center;            /* center vertically */\n  padding: 1rem;\n  background: #222;\n}\n.navbar a {\n  color: #fff;\n  margin: 0 1rem;\n  text-decoration: none;\n}"
                },
                {
                    "type": "text",
                    "text": "<strong>Example 2: Grid for a Complex Layout</strong><br>Grid provides better structure when both rows and columns need to be controlled simultaneously."
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".dashboard {\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;\n  grid-template-rows: auto 1fr auto;\n  gap: 1rem;\n}\nheader  { grid-column: 1 / 4; }\nmain    { grid-column: 2; }\naside   { grid-column: 1; }\nfooter  { grid-column: 1 / 4; }"
                },
                {
                    "type": "text",
                    "text": "<strong>Example 3: Combining Grid and Flexbox</strong><br>Many modern UIs mix the two systems — for example, using Grid for the page layout and Flexbox inside components for aligning content."
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".page { display: grid; grid-template-columns: 1fr 3fr; gap: 2rem; }\n.sidebar { display: flex; flex-direction: column; gap: 1rem; }"
                },
                {
                    "type": "text",
                    "text": "<strong>When to Use</strong><br><ul><li>Use <strong>Flexbox</strong> for one-dimensional layouts — e.g., aligning items horizontally in a navbar or vertically stacking cards.</li><li>Use <strong>Grid</strong> when you need both row and column control — e.g., creating structured dashboards or templates.</li><li>Combine both: Grid for overall structure, Flexbox for internal alignment.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Performance & Maintainability Tips</strong><br><ul><li>Prefer Grid for fixed or predictable layouts (e.g., landing pages).</li><li>Prefer Flexbox for components that require content-driven flexibility (e.g., toolbars, media lists).</li><li>Use named grid areas for readability and semantic mapping of layout regions.</li><li>Minimize unnecessary nesting — combining both systems too deeply can complicate debugging.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> Think of <code>Flexbox</code> as arranging items along a rope, and <code>Grid</code> as arranging them on graph paper."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li><strong>Flexbox:</strong> One-dimensional, best for aligning and distributing items.</li><li><strong>Grid:</strong> Two-dimensional, best for designing structured layouts.</li><li>They are complementary tools — not competitors.</li></ul>"
                }
            ]
        }
        },
        {
        "id": "css-hardware-acceleration",
        "title": "How do hardware acceleration and compositing affect CSS animation performance?",
        "technology": "css",
        "difficulty": "advanced",
        "importance": 5,
        "description": "Hardware acceleration and compositing layers are critical for smooth, performant animations in CSS. Understanding how the browser's rendering pipeline works — including layout, paint, and composite steps — helps developers optimize animations and avoid costly reflows.",
        "answer": {
            "blocks": [
                {
                    "type": "text",
                    "text": "<strong>Overview</strong><br><br>CSS animations can either be handled by the <em>CPU</em> (software rendering) or <em>GPU</em> (hardware acceleration). When hardware acceleration is enabled, specific properties (like <code>transform</code> and <code>opacity</code>) are offloaded to the GPU, allowing smoother transitions and freeing up the CPU for other tasks. The browser achieves this by creating a new <em>compositing layer</em> for the animated element."
                },
                {
                    "type": "text",
                    "text": "<strong>The Rendering Pipeline</strong><br><br>The browser converts CSS and HTML into pixels in three major steps:<br><ol><li><strong>Layout:</strong> Calculates positions and dimensions of elements.</li><li><strong>Paint:</strong> Fills pixels (colors, borders, shadows, etc.) for each element.</li><li><strong>Composite:</strong> Combines painted layers into the final image rendered on screen.</li></ol>Animations that skip layout and paint and only use compositing are significantly faster."
                },
                {
                    "type": "list",
                    "columns": [
                        "Animation Type",
                        "Performance Impact",
                        "Typical Properties"
                    ],
                    "rows": [
                        [
                            "Layout-triggering",
                            "Expensive — causes reflow & repaint",
                            "width, height, margin, padding, top, left"
                        ],
                        [
                            "Paint-triggering",
                            "Moderate — repaints pixels but avoids reflow",
                            "background-color, box-shadow, border-radius"
                        ],
                        [
                            "Composite-only",
                            "Fastest — handled on GPU layers",
                            "transform, opacity, filter"
                        ]
                    ],
                    "caption": "Performance cost of CSS animation types"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".card {\n  transition: transform 0.3s ease, opacity 0.3s ease;\n}\n.card:hover {\n  transform: translateY(-10px) scale(1.03);\n  opacity: 0.9;\n}"
                },
                {
                    "type": "text",
                    "text": "Here, <code>transform</code> and <code>opacity</code> are GPU-accelerated properties. The browser creates a new layer for <code>.card</code>, ensuring smooth motion without re-rendering other elements."
                },
                {
                    "type": "text",
                    "text": "<strong>Forcing Hardware Acceleration</strong><br><br>Developers can trigger GPU compositing by using the <code>transform: translateZ(0)</code> or <code>will-change</code> property."
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".animated-element {\n  will-change: transform, opacity; /* Hints browser to promote layer */\n  transform: translateZ(0);        /* Creates a 3D context */\n}"
                },
                {
                    "type": "text",
                    "text": "<strong>When Hardware Acceleration Hurts</strong><br><ul><li>Too many GPU layers consume video memory and degrade performance.</li><li>Animating large or overlapping layers can trigger unnecessary overdraw.</li><li>Misusing <code>will-change</code> can cause layout instability and memory leaks if not reset after animation ends.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Best Practices</strong><br><ul><li>Animate only <code>transform</code> and <code>opacity</code> when possible.</li><li>Use <code>will-change</code> sparingly and remove it after animation completion.</li><li>Profile performance using Chrome DevTools → Rendering → ‘Paint flashing’ and ‘Layers’ panels.</li><li>Keep composited layers minimal for mobile optimization.</li></ul>"
                },
                {
                    "type": "text",
                    "text": "<strong>Practical Example: Smooth Card Hover</strong>"
                },
                {
                    "type": "code",
                    "language": "css",
                    "code": ".card {\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  will-change: transform;\n}\n.card:hover {\n  transform: translateY(-8px);\n  box-shadow: 0 12px 24px rgba(0,0,0,0.15);\n}"
                },
                {
                    "type": "text",
                    "text": "Here, <code>transform</code> is GPU-accelerated, but <code>box-shadow</code> still triggers repaints. To optimize further, use subtle shadows or limit them to static states."
                },
                {
                    "type": "text",
                    "text": "<i class='fa-solid fa-lightbulb'></i> Hardware acceleration is like giving animations a fast lane — but overusing it can clog the highway. Use it wisely for the smoothest results."
                },
                {
                    "type": "text",
                    "text": "<strong>Summary</strong><br><ul><li>CSS animations go through layout → paint → composite steps.</li><li>GPU compositing enables smoother transitions using <code>transform</code> and <code>opacity</code>.</li><li><code>will-change</code> and <code>translateZ(0)</code> can promote elements to GPU layers.</li><li>Always test and profile — performance varies across browsers and devices.</li></ul>"
                }
            ]
        }
    }
]