[
    {
        "id": "html-accordion",
        "title": "Build an accessible accordion",
        "description": "Create a collapsible accordion using semantic HTML (<button>, <section>) and proper ARIA so it is keyboard-accessible.",
        "type": "coding",
        "technology": "html",
        "difficulty": "intermediate",
        "tags": [
            "html",
            "aria",
            "accessibility",
            "semantics"
        ],
        "importance": 4,
        "starterHtml": "<button class=\"accordion\" aria-expanded=\"false\" aria-controls=\"sect-1\" id=\"acc-1\">Section 1</button>\n<section id=\"sect-1\" hidden>\n  <p>Start hereâ€¦</p>\n</section>",
        "starterCss": ".accordion{display:block;padding:.5rem 1rem;border:1px solid #555;border-radius:6px;background:transparent;}\n[hidden]{display:none !important;}",
        "tests": "it('button has the correct ARIA relationships', () => {\n  const btn = document.querySelector('button.accordion');\n  if(!btn) throw new Error('No <button class=\"accordion\"> found');\n  if(btn.getAttribute('id') !== 'acc-1') throw new Error('Button id should be \"acc-1\"');\n  if(btn.getAttribute('aria-controls') !== 'sect-1') throw new Error('aria-controls must reference #sect-1');\n  if(btn.getAttribute('aria-expanded') !== 'false') throw new Error('aria-expanded should be \"false\" initially');\n});\n\nit('section exists and is hidden initially', () => {\n  const sec = document.getElementById('sect-1');\n  if(!sec) throw new Error('Missing <section id=\"sect-1\">');\n  if(!sec.hasAttribute('hidden')) throw new Error('Section should have the [hidden] attribute initially');\n  const style = window.getComputedStyle(sec);\n  if(style.display !== 'none') throw new Error('Hidden section should be display:none via CSS');\n});"
    },
    {
        "id": "html-form",
        "title": "Semantic sign-up form",
        "description": "Mark up a sign-up form with labels, required fields, and a plan selector using <fieldset>/<legend>.",
        "type": "coding",
        "technology": "html",
        "difficulty": "easy",
        "tags": [
            "forms",
            "semantics",
            "a11y"
        ],
        "importance": 3,
        "starterHtml": "<form novalidate>\n  <label for=\"name\">Name</label>\n  <input id=\"name\" name=\"name\" required>\n\n  <label for=\"email\">Email</label>\n  <input id=\"email\" type=\"email\" name=\"email\" required>\n\n  <fieldset>\n    <legend>Plan</legend>\n    <label><input type=\"radio\" name=\"plan\" value=\"free\" checked> Free</label>\n    <label><input type=\"radio\" name=\"plan\" value=\"pro\"> Pro</label>\n  </fieldset>\n\n  <button type=\"submit\">Sign up</button>\n</form>",
        "starterCss": "form{display:grid;gap:.75rem;max-width:420px}\nlabel{font-weight:600}\ninput,button{padding:.5rem;border:1px solid #555;border-radius:6px;background:transparent;color:inherit}",
        "tests": "it('name and email inputs are labeled and required', () => {\n  const name = document.getElementById('name');\n  if(!name) throw new Error('Missing #name input');\n  if(!document.querySelector('label[for=\"name\"]')) throw new Error('Missing label for name');\n  if(!name.hasAttribute('required')) throw new Error('Name should be required');\n  const email = document.getElementById('email');\n  if(!email) throw new Error('Missing #email input');\n  if(!document.querySelector('label[for=\"email\"]')) throw new Error('Missing label for email');\n  if((email as HTMLInputElement).type !== 'email') throw new Error('Email input type should be email');\n  if(!email.hasAttribute('required')) throw new Error('Email should be required');\n});\n\nit('fieldset with legend and two radio options exists', () => {\n  const fs = document.querySelector('fieldset');\n  if(!fs) throw new Error('Missing <fieldset>');\n  const legend = fs.querySelector('legend');\n  if(!legend) throw new Error('Missing <legend> inside fieldset');\n  const radios = document.querySelectorAll('input[type=\"radio\"][name=\"plan\"]');\n  if(radios.length !== 2) throw new Error('Expected exactly 2 radio inputs named \"plan\"');\n});\n\nit('submit button is present', () => {\n  if(!document.querySelector('button[type=\"submit\"]')) throw new Error('Missing submit button');\n});"
    }
]