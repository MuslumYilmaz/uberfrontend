[
  {
    "id": "js-promise-all",
    "title": "Implement promiseAll",
    "description": "Write your own `Promise.all()` implementation that takes an iterable of promises and resolves to an array of results, or rejects on the first error.",
    "type": "coding",
    "technology": "javascript",
    "difficulty": "intermediate",
    "tags": [
      "promise",
      "async"
    ],
    "importance": 4,
    "languageDefault": "js"
  },
  {
    "id": "js-debounce",
    "title": "Create a debounce function",
    "description": "Implement a `debounce(fn, wait)` utility that delays invoking `fn` until after `wait` milliseconds have elapsed since the last call.",
    "type": "coding",
    "technology": "javascript",
    "difficulty": "beginner",
    "tags": [
      "debounce",
      "timers"
    ],
    "importance": 3,
    "languageDefault": "js"
  },
  {
    "id": "js-array-flatten",
    "title": "Flatten a nested array",
    "description": "Write a function `flatten(arr, depth)` that flattens `arr` up to the specified `depth`.",
    "type": "coding",
    "technology": "javascript",
    "difficulty": "intermediate",
    "tags": [
      "array",
      "recursion"
    ],
    "importance": 4,
    "languageDefault": "js"
  },
  {
    "id": "dummy-test",
    "title": "Dummy Test Question",
    "description": "This one lets us test starter vs solution swap in Monaco.",
    "difficulty": "Easy",
    "importance": 1,
    "tags": [
      "test"
    ],
    "starterCode": "export default function hello() {\n  console.log('Hello from starter');\n}",
    "starterCodeTs": "export default function hello(): void {\n  console.log('Hello from starter');\n}",
    "solution": "export default function hello() {\n  console.log('Hello from solution');\n}",
    "solutionTs": "export default function hello(): void {\n  console.log('Hello from solution');\n}",
    "stackblitzEmbedUrl": null,
    "stackblitzSolutionUrl": null,
    "languageDefault": "js",
    "type": "coding",
    "technology": "javascript"
  },
  {
    "id": "mean",
    "title": "Mean",
    "description": "Implement a function mean(array) that returns the mean of values.",
    "type": "coding",
    "technology": "javascript",
    "difficulty": "easy",
    "tags": [
      "array",
      "math"
    ],
    "importance": 3,
    "starterCode": "export default function mean(array) {\n  throw 'Not implemented!';\n}",
    "starterCodeTs": "export default function mean(array: number[]): number {\n  // TODO: implement\n  return Number.NaN;\n}",
    "solution": "export default function mean(array) {\n  if (array.length === 0) return NaN;\n  return array.reduce((s, v) => s + v, 0) / array.length;\n}",
    "solutionTs": "export default function mean(array: number[]): number {\n  if (array.length === 0) return Number.NaN;\n  return array.reduce((s, v) => s + v, 0) / array.length;\n}",
    "tests": "import mean from './mean';\n\ndescribe('mean', () => {\n  test('empty input array', () => {\n    expect(mean([])).toBeNaN();\n  });\n\n  test('single value', () => {\n    expect(mean([0])).toEqual(0);\n  });\n\n  test('two values', () => {\n    expect(mean([1, 3])).toEqual(2);\n  });\n});",
    "testsTs": "import mean from './mean';\n\ndescribe('mean', () => {\n  test('empty input array', () => {\n    expect(mean([] as number[])).toBeNaN();\n  });\n\n  test('single value', () => {\n    expect(mean([0])).toEqual(0);\n  });\n\n  test('two values', () => {\n    expect(mean([1, 3])).toEqual(2);\n  });\n});",
    "languageDefault": "js"
  },
  {
    "id": "deepClone",
    "title": "Deep Clone",
    "description": {
      "text": "Implement a deepClone function that performs a deep clone operation on JavaScript objects. You can assume the input only contains JSON-serializable values (null, boolean, number, string, Array, Object) and will not contain any other objects like Date, RegExp, Map or Set.",
      "examples": [
        "const obj1 = { user: { role: 'admin' } };",
        "const clonedObj1 = deepClone(obj1);",
        "clonedObj1.user.role = 'guest'; // Change the cloned user's role to 'guest'.",
        "clonedObj1.user.role; // 'guest'",
        "obj1.user.role; // Should still be 'admin'.",
        "",
        "const obj2 = { foo: [{ bar: 'baz' }] };",
        "const clonedObj2 = deepClone(obj2);",
        "obj2.foo[0].bar = 'bax'; // Modify the original object.",
        "obj2.foo[0].bar; // 'bax'",
        "clonedObj2.foo[0].bar; // Should still be 'baz'."
      ]
    },
    "type": "coding",
    "technology": "javascript",
    "difficulty": "medium",
    "tags": [
      "object",
      "clone",
      "recursion"
    ],
    "importance": 4,
    "starterCode": "export default function deepClone(obj) {\n  throw 'Not implemented!';\n}",
    "starterCodeTs": "export default function deepClone<T>(obj: T): T {\n  // TODO: implement\n  throw new Error('Not implemented!');\n}",
    "solution": "export default function deepClone(obj) {\n  if (obj === null || typeof obj !== 'object') return obj;\n  if (Array.isArray(obj)) return obj.map(deepClone);\n  const res = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = deepClone(obj[key]);\n    }\n  }\n  return res;\n}",
    "solutionTs": "export default function deepClone<T>(obj: T): T {\n  if (obj === null || typeof obj !== 'object') return obj;\n  if (Array.isArray(obj)) return (obj as unknown as any[]).map(deepClone) as unknown as T;\n  const res: Record<string, unknown> = {};\n  for (const key in obj as Record<string, unknown>) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      // @ts-ignore indexable copy for exercise simplicity\n      res[key] = deepClone((obj as any)[key]);\n    }\n  }\n  return res as T;\n}",
    "tests": "import deepClone from './deepClone';\n\ndescribe('deepClone', () => {\n  test('primitive', () => {\n    expect(deepClone(5)).toEqual(5);\n  });\n\n  test('nested object', () => {\n    const o = { a: { b: 2 } };\n    const c = deepClone(o);\n    c.a.b = 3;\n    expect(o.a.b).toEqual(2);\n  });\n\n  test('array inside object', () => {\n    const o = { arr: [1, 2, { x: 5 }] };\n    const c = deepClone(o);\n    c.arr[2].x = 10;\n    expect(o.arr[2].x).toEqual(5);\n  });\n});",
    "testsTs": "import deepClone from './deepClone';\n\ndescribe('deepClone', () => {\n  test('primitive', () => {\n    expect(deepClone(5)).toEqual(5);\n  });\n\n  test('nested object', () => {\n    const o = { a: { b: 2 } } as const;\n    const c = deepClone(o);\n    (c as any).a.b = 3;\n    expect(o.a.b).toEqual(2);\n  });\n\n  test('array inside object', () => {\n    const o = { arr: [1, 2, { x: 5 }] };\n    const c = deepClone(o);\n    (c.arr[2] as any).x = 10;\n    expect(o.arr[2].x).toEqual(5);\n  });\n});",
    "languageDefault": "js"
  }
]