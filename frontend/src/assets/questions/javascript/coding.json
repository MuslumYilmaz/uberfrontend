{
  "id": "js-number-clamp",
  "title": "Clamp",
  "type": "coding",
  "technology": "javascript",
  "difficulty": "easy",
      "tags": [
      "promise",
      "async"
    ],
  "description": {
    "summary": "Implement a function `clamp(value, lower, upper)` to restrict `value` within inclusive `lower` and `upper` bounds.",
    "arguments": [
      {
        "name": "value",
        "type": "number",
        "desc": "The number to clamp."
      },
      {
        "name": "lower",
        "type": "number",
        "desc": "The lower bound."
      },
      {
        "name": "upper",
        "type": "number",
        "desc": "The upper bound."
      }
    ],
    "returns": {
      "type": "number",
      "desc": "The clamped number."
    },
    "examples": [
      "// Within the bounds\nclamp(3, 0, 5) // => 3",
      "// Smaller than lower\nclamp(-10, -3, 5) // => -3",
      "// Bigger than upper\nclamp(10, -5, 5) // => 5"
    ]
  },
  "starterCode": "export default function clamp(value, lower, upper) {\n  throw new Error('Not implemented');\n}\n",
  "starterCodeTs": "export default function clamp(value: number, lower: number, upper: number): number {\n  throw new Error('Not implemented');\n}\n",
  "solutionBlock": {
    "explanation": "Check if `value` is below `lower` → return `lower`; above `upper` → return `upper`; otherwise return `value`.",
    "codeJs": "export default function clamp(value, lower, upper){\n  if (value < lower) return lower;\n  if (value > upper) return upper;\n  return value;\n}\n",
    "codeTs": "export default function clamp(value: number, lower: number, upper: number): number {\n  if (value < lower) return lower;\n  if (value > upper) return upper;\n  return value;\n}\n"
  },
  "tests": "import clamp from './clamp';\n\ndescribe('clamp', () => {\n  test('within', () => { expect(clamp(3,0,5)).toBe(3); });\n  test('lower', () => { expect(clamp(-10,-3,5)).toBe(-3); });\n  test('upper', () => { expect(clamp(10,-5,5)).toBe(5); });\n});\n"
}