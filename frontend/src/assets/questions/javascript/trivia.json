[
  {
    "id": "js-event-loop",
    "title": "Explain the JavaScript Event Loop",
    "description": "What is the event loop in JavaScript? How do macrotasks and microtasks interact?",
    "type": "trivia",
    "technology": "javascript",
    "difficulty": "hard",
    "tags": [
      "event-loop",
      "async",
      "microtasks"
    ],
    "importance": 5,
    "companies": [
      "google",
      "meta",
      "microsoft",
      "uber",
      "netflix"
    ],
    "answer": "The event loop coordinates execution between the call stack, microtask queue (Promises/queueMicrotask) and macrotask queue (setTimeout, setInterval, DOM events). JS runs to completion on the call stack. After the stack empties, the event loop first flushes all microtasks in FIFO order; only when the microtask queue is empty does it take a single macrotask and run it. Microtasks can enqueue more microtasks, which run before any further macrotasks, which is why Promises often run before setTimeout callbacks."
  },
  {
    "id": "js-this-binding",
    "title": "Describe `this` Binding",
    "description": "In JavaScript, how is the value of `this` determined in a function call? Give examples for default, implicit, explicit, and new binding.",
    "type": "trivia",
    "technology": "javascript",
    "difficulty": "intermediate",
    "tags": [
      "this",
      "call",
      "bind",
      "apply"
    ],
    "importance": 4,
    "companies": [
      "amazon",
      "uber",
      "airbnb"
    ],
    "answer": "Default: in non-strict mode, `this` is the global object; in strict mode, `undefined`. Implicit: when called as obj.fn(), `this` is obj. Explicit: use call/apply/bind to set `this` directly. New binding: with `new`, `this` is the newly created instance. Arrow functions capture `this` lexically from their surrounding scope and ignore call/apply/bind."
  },
  {
    "id": "js-closures",
    "title": "What Are Closures?",
    "description": "Define a closure in JavaScript and provide a use case where a closure is essential.",
    "type": "trivia",
    "technology": "javascript",
    "difficulty": "easy",
    "tags": [
      "closure",
      "scope"
    ],
    "importance": 3,
    "companies": [
      "apple",
      "google",
      "meta",
      "netflix"
    ],
    "answer": "A closure is a function plus the lexical environment it was created in. It lets a function access variables from its outer scope even after that outer function has returned. Uses: private state (module pattern), function factories (currying/partial application), and handlers that remember context."
  }
]